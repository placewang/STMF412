<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\E457_STM32F205.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\E457_STM32F205.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Dec 05 09:34:31 2022
<BR><P>
<H3>Maximum Stack Usage =        808 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Command_loop &rArr; Command_exec_otherset &rArr; Upgrade_Boot &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">CAN2_RX0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from stm32f2xx_it.o(i.ADC_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f2xx_it.o(i.BusFault_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from stm32f2xx_it.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from stm32f2xx_it.o(i.CAN1_RX1_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from stm32f2xx_it.o(i.CAN1_SCE_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from stm32f2xx_it.o(i.CAN1_TX_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[59]">CRYP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from stm32f2xx_it.o(i.DMA1_Stream0_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from stm32f2xx_it.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from stm32f2xx_it.o(i.DMA1_Stream2_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from stm32f2xx_it.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from stm32f2xx_it.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from stm32f2xx_it.o(i.DMA1_Stream5_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from stm32f2xx_it.o(i.DMA1_Stream6_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from stm32f2xx_it.o(i.DMA1_Stream7_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from stm32f2xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from stm32f2xx_it.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from stm32f2xx_it.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from stm32f2xx_it.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f2xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f2xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32f2xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32f2xx_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from stm32f2xx_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from stm32f2xx_it.o(i.EXTI3_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from stm32f2xx_it.o(i.EXTI4_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32f2xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from stm32f2xx_it.o(i.FLASH_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from stm32f2xx_it.o(i.FSMC_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5a]">HASH_RNG_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f2xx_it.o(i.HardFault_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from stm32f2xx_it.o(i.I2C1_ER_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from stm32f2xx_it.o(i.I2C1_EV_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from stm32f2xx_it.o(i.I2C2_ER_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from stm32f2xx_it.o(i.I2C2_EV_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f2xx_it.o(i.MemManage_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f2xx_it.o(i.NMI_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from stm32f2xx_it.o(i.OTG_FS_WKUP_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from stm32f2xx_it.o(i.PVD_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f2xx_it.o(i.PendSV_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from stm32f2xx_it.o(i.RCC_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from stm32f2xx_it.o(i.RTC_Alarm_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from stm32f2xx_it.o(i.RTC_WKUP_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from stm32f2xx_it.o(i.SDIO_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from stm32f2xx_it.o(i.SPI1_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from stm32f2xx_it.o(i.SPI2_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from stm32f2xx_it.o(i.SPI3_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f2xx_it.o(i.SVC_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f2xx_it.o(i.SysTick_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5c]">SystemInit</a> from system_stm32f2xx.o(i.SystemInit) referenced from startup_stm32f2xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from stm32f2xx_it.o(i.TAMP_STAMP_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from stm32f2xx_it.o(i.TIM1_BRK_TIM9_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from stm32f2xx_it.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from stm32f2xx_it.o(i.TIM1_TRG_COM_TIM11_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from stm32f2xx_it.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f2xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32f2xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from stm32f2xx_it.o(i.TIM4_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from stm32f2xx_it.o(i.TIM5_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from stm32f2xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from stm32f2xx_it.o(i.TIM7_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from stm32f2xx_it.o(i.TIM8_BRK_TIM12_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from stm32f2xx_it.o(i.TIM8_CC_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from stm32f2xx_it.o(i.TIM8_TRG_COM_TIM14_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from stm32f2xx_it.o(i.TIM8_UP_TIM13_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from stm32f2xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from stm32f2xx_it.o(i.UART5_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f2xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from stm32f2xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32f2xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f2xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from stm32f2xx_it.o(i.WWDG_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f2xx.o(.text)
 <LI><a href="#[5e]">fputc</a> from uart.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[5b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(.text)
</UL>
<P><STRONG><a name="[3ac]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[77]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3ad]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3ae]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3af]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3b0]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[3b1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[3b2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[200]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_SendMessage
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_TX_Push
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_write_main_id_to_flash
</UL>

<P><STRONG><a name="[3b3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprints
</UL>

<P><STRONG><a name="[3b5]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.CAN1_RX1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_data_fill_zero
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3b6]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3b7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_DD_config
</UL>

<P><STRONG><a name="[391]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_data_fill_zero
</UL>

<P><STRONG><a name="[3b8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1fd]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_check_is_binding_ok
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SYS_Data_Time
</UL>

<P><STRONG><a name="[64]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SYS_Data_Time
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintFloat
</UL>

<P><STRONG><a name="[39c]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintFloat
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_Set_overloaddata
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprint
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintFloat
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_Set_overloaddata
</UL>

<P><STRONG><a name="[39b]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintFloat
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_Set_overloaddata
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3b9]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[69]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[68]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[6d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[70]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[60]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3ba]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3bb]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[78]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[3bc]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3bd]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>ADC2_HardInit</STRONG> (Thumb, 218 bytes, Stack size 112 bytes, adc.o(i.ADC2_HardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ADC2_HardInit &rArr; ADC2_ChannelsConfig &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_ChannelsConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[86]"></a>ADC_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HardInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_HardInit
</UL>

<P><STRONG><a name="[8b]"></a>ADC_CommonInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HardInit
</UL>

<P><STRONG><a name="[85]"></a>ADC_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HardInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_HardInit
</UL>

<P><STRONG><a name="[84]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_DMARequestAfterLastTransferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HardInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_HardInit
</UL>

<P><STRONG><a name="[8a]"></a>ADC_HardInit</STRONG> (Thumb, 244 bytes, Stack size 128 bytes, adc.o(i.ADC_HardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ADC_HardInit &rArr; ADC_ChannelsConfig &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_VBATCmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelsConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[83]"></a>ADC_Init</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, stm32f2xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HardInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_HardInit
</UL>

<P><STRONG><a name="[7a]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32f2xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelsConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_ChannelsConfig
</UL>

<P><STRONG><a name="[8f]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_SoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_start_main
</UL>

<P><STRONG><a name="[82]"></a>ADC_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HardInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_HardInit
</UL>

<P><STRONG><a name="[8c]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_TempSensorVrefintCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HardInit
</UL>

<P><STRONG><a name="[8d]"></a>ADC_VBATCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_VBATCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HardInit
</UL>

<P><STRONG><a name="[8e]"></a>ADC_start_main</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adc.o(i.ADC_start_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_start_main
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39e]"></a>Alarm_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, main.o(i.Alarm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Alarm_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_init
</UL>

<P><STRONG><a name="[90]"></a>Alert_Clear</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, alert.o(i.Alert_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Alert_Clear &rArr; alert_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_alarm
</UL>

<P><STRONG><a name="[390]"></a>Alert_Code_Send_Delay_ISR</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, alert.o(i.Alert_Code_Send_Delay_ISR))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_time_2ms
</UL>

<P><STRONG><a name="[94]"></a>Alert_Code_Send_Delay_Setcnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, alert.o(i.Alert_Code_Send_Delay_Setcnt))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alert_Poll
</UL>

<P><STRONG><a name="[92]"></a>Alert_Poll</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, alert.o(i.Alert_Poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Alert_Poll &rArr; Message_Send_Alert &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_error
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_Alert
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_pop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_find
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alert_Code_Send_Delay_Setcnt
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[365]"></a>Arch_E499_step_pwm_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arch_stm32.o(i.Arch_E499_step_pwm_enable))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BusFault_Handler &rArr; alert_cpu_fatal &rArr; Message_Send_Alert &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_cpu_fatal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>CAN0_Receive</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, can.o(i.CAN0_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN0_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MessagePending
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Boot
</UL>

<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; hook_CAN_isr &rArr; Message_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_CAN_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.CAN1_SCE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN1_SCE_IRQHandler &rArr; hook_CAN_err_isr &rArr; CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_CAN_err_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.CAN1_TX_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[37c]"></a>CAN_ClearITPendingBit</STRONG> (Thumb, 164 bytes, Stack size 4 bytes, stm32f2xx_can.o(i.CAN_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CAN_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_CAN_err_isr
</UL>

<P><STRONG><a name="[9f]"></a>CAN_Configuration</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, can.o(i.CAN_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CAN_Configuration &rArr; CAN_FilterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Set_CANID
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[a1]"></a>CAN_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f2xx_can.o(i.CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
</UL>

<P><STRONG><a name="[a5]"></a>CAN_FilterInit</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, stm32f2xx_can.o(i.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
</UL>

<P><STRONG><a name="[a8]"></a>CAN_GetITStatus</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, stm32f2xx_can.o(i.CAN_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_CAN_err_isr
</UL>

<P><STRONG><a name="[212]"></a>CAN_GetLSBTransmitErrorCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_can.o(i.CAN_GetLSBTransmitErrorCounter))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CAN_err_cnt
</UL>

<P><STRONG><a name="[210]"></a>CAN_GetLastErrorCode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_can.o(i.CAN_GetLastErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_CAN_err_isr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CAN_Last_ErrorCode
</UL>

<P><STRONG><a name="[211]"></a>CAN_GetReceiveErrorCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_can.o(i.CAN_GetReceiveErrorCounter))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CAN_err_cnt
</UL>

<P><STRONG><a name="[a6]"></a>CAN_ITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_can.o(i.CAN_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
</UL>

<P><STRONG><a name="[a3]"></a>CAN_Init</STRONG> (Thumb, 274 bytes, Stack size 0 bytes, stm32f2xx_can.o(i.CAN_Init))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
</UL>

<P><STRONG><a name="[9b]"></a>CAN_MessagePending</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_can.o(i.CAN_MessagePending))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Receive
</UL>

<P><STRONG><a name="[9c]"></a>CAN_Receive</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f2xx_can.o(i.CAN_Receive))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_CAN_isr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Receive
</UL>

<P><STRONG><a name="[a2]"></a>CAN_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_can.o(i.CAN_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
</UL>

<P><STRONG><a name="[376]"></a>CAN_Transmit</STRONG> (Thumb, 234 bytes, Stack size 4 bytes, stm32f2xx_can.o(i.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_SendMessage
</UL>

<P><STRONG><a name="[35d]"></a>CRC16</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, upgrade.o(i.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_crc_ok
</UL>

<P><STRONG><a name="[aa]"></a>Can_error_printf</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, can.o(i.Can_error_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Can_error_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CAN_err_cnt
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CAN_Last_ErrorCode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_printf_key
</UL>

<P><STRONG><a name="[3a9]"></a>CheckIn_Timer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, arch_stm32.o(i.CheckIn_Timer))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_2ms_prog
</UL>

<P><STRONG><a name="[ae]"></a>CheckOverloadBranch</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, arch_stm32.o(i.CheckOverloadBranch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CheckOverloadBranch &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_EXTI_isr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_CHECK_iscomming
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_adc2_isr
</UL>

<P><STRONG><a name="[af]"></a>Check_CMD_is_Support</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.Check_CMD_is_Support))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Check_CMD_is_Support &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_xzq
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_sysset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_dct
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_data_store
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_checkonline
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_alarm
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_Testcode
</UL>

<P><STRONG><a name="[b1]"></a>Check_Can_ERR_loop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, can.o(i.Check_Can_ERR_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Check_Can_ERR_loop
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_LED_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>Check_DirStatus</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.Check_DirStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Check_DirStatus &rArr; arch_Get_DirStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Get_DirStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_alarm
</UL>

<P><STRONG><a name="[b5]"></a>Check_DirStatus_new</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(i.Check_DirStatus_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Check_DirStatus_new &rArr; arch_get_dir2
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_dir2
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_dir1
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_250us_prog
</UL>

<P><STRONG><a name="[2c3]"></a>Check_Ecoder_is_stable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, encoder.o(i.Check_Ecoder_is_stable))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
</UL>

<P><STRONG><a name="[146]"></a>Check_is_MT6813PWM_Mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, time.o(i.Check_is_MT6813PWM_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Read
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_pwm_timeout_loop
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Poll
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
</UL>

<P><STRONG><a name="[2c7]"></a>Check_step_stop_timeout</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, step.o(i.Check_step_stop_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_justrun
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
</UL>

<P><STRONG><a name="[b8]"></a>Checkin_need_send_data</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, arch_stm32.o(i.Checkin_need_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Checkin_need_send_data &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[338]"></a>Clear_alarm_status_withMASK</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, arch_stm32.o(i.Clear_alarm_status_withMASK))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_power_IC_fault_check
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARN_Overload_Check
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_Overload_Check
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_AD24_Overload_Check
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACT_Overload_Check
</UL>

<P><STRONG><a name="[b9]"></a>Command_exec_Testcode</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, main.o(i.Command_exec_Testcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Command_exec_Testcode &rArr; StepMotor_justrun &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_CMD_is_Support
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_justrun
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setlogid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_postion_ecode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_coder_info
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_loop
</UL>

<P><STRONG><a name="[be]"></a>Command_exec_alarm</STRONG> (Thumb, 668 bytes, Stack size 8 bytes, main.o(i.Command_exec_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = Command_exec_alarm &rArr; Exec_alarm_check_end &rArr; exec_EMF_YARN_ &rArr; Exec_EMF &rArr; arch_YARNEMF_Setup &rArr; arch_YARN_Step_Setup &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_DirStatus
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_CMD_is_Support
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanzhen_zt_get
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanzhen_delay_set
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_Set_overloaddata
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_alert_content_loop
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alert_Clear
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_check_power_isok
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_ctrl_ex
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_8844_Reset
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverLoad_Setup
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ErrorStatus
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_sendError
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_alarm_shock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_alarm_check_start
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_alarm_check_end
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_loop
</UL>

<P><STRONG><a name="[cd]"></a>Command_exec_checkonline</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.Command_exec_checkonline))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Command_exec_checkonline &rArr; Check_CMD_is_Support &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_CMD_is_Support
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Get_ID
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_loop
</UL>

<P><STRONG><a name="[cf]"></a>Command_exec_data_store</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main.o(i.Command_exec_data_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Command_exec_data_store &rArr; Exec_Write_data_sys_Key &rArr; EE_Write &rArr; EE_WriteVariable &rArr; EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_CMD_is_Support
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_data_sys_Key
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Read_data_with_sys_key
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_loop
</UL>

<P><STRONG><a name="[d2]"></a>Command_exec_dct</STRONG> (Thumb, 568 bytes, Stack size 24 bytes, main.o(i.Command_exec_dct))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = Command_exec_dct &rArr; Exec_EMF_isr_EX &rArr; Exec_EMF &rArr; arch_YARNEMF_Setup &rArr; arch_YARN_Step_Setup &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_CMD_is_Support
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_check_power_isok
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_base_DC24_zero
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_EMF_isr_EX
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_EMF_isr
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_EMF_GET_EX
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_loop
</UL>

<P><STRONG><a name="[d7]"></a>Command_exec_motor_density</STRONG> (Thumb, 1650 bytes, Stack size 24 bytes, main.o(i.Command_exec_motor_density))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = Command_exec_motor_density &rArr; StepMotor_isr_exec_new_dd &rArr; StepMotor_exec_new_dd &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_CMD_is_Support
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_check_power_isok
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Motor_Set_Check_all
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_set_maxspeed_DD_HZ
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_other_Set_Zerowide_inputerror
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_other_Get_Zerowide_inputerror
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_isr_exec_new_dd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_isr_exec
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDall
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Setup_Resolution
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Setup_Direction_log
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Setup_Direction
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Setup_Active
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_zero_type_
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_zero_detect
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_movetozero_adv_steps
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Zero_go_Steps
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_VeryMode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Speed_EX
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Speed
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Reset_Speed
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Reset_Delay_Time
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Position
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_MAXSpeed_DD
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Input_error
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_FastMode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Density_check_zero_data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset_RightMotor
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset_LeftMotor
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Get_Position
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_DD_config
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_All_Reset
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_is_doing_bind_cmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_bind_cmd_set
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Set_minsteps_ecode_rang
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Set_maxsteps_cw
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Set_DM_check_area
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Set_DM_Type
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Get_All_postion
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_StepMotor_isveryenable_IDall
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_check_Type
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_DDM_need_Check
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_StepType_sig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_StepType
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_loop
</UL>

<P><STRONG><a name="[103]"></a>Command_exec_motor_other</STRONG> (Thumb, 1866 bytes, Stack size 24 bytes, main.o(i.Command_exec_motor_other))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = Command_exec_motor_other &rArr; StepMotor_Type_exec &rArr; StepMotor_Feet_exec_no &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_CMD_is_Support
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_check_power_isok
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Get_ID
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Set_work_check_pos
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Motor_Set_Check_all
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_set_motor_signal_edg_return
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_set_LX_ACT_AUTOadj_enable
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_other_Set_Zerowide_inputerror
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_other_Get_Zerowide_inputerror
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_input_NCorNO_set
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_alert_delay_cnt_set
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Type_exec
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Type_Set_Position
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Type_ResetALL
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Type_Reset
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Triangle_Set_Sign
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Triangle_Get_Sign
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Triangle_Get_Position
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Speed_report
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Setup_Resolution
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Setup_ACTION_Para
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_zero_type_
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_zero_dir
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_zero_detect
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_work_steps
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Zero_go_Steps_ex
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Zero_go_Steps
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_ZeroPos_WorkST
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Work_disable_with_ZeroPos
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Speed_EX
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Other_Set_isfast
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Other_Set_Work_Enable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Other_SetSpeed
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Feet_Setup
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Action_Set_Position
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Step_Motor_postion_ex
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Step_Motor_TO_Which_Postion
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LX_ex_adjData
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Set_minsteps_ecode_rang
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Set_maxsteps_cw
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_StepMotor_isveryenable_IDself
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Triangle_step
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_check_Type
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ZeroWorkStatus_StepType_sig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_StepType_sig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_StepType
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Yarn_step_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_loop
</UL>

<P><STRONG><a name="[123]"></a>Command_exec_otherset</STRONG> (Thumb, 876 bytes, Stack size 16 bytes, main.o(i.Command_exec_otherset))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = Command_exec_otherset &rArr; Upgrade_Boot &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_CMD_is_Support
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Func_Type
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Disable
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_Off
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Get_Board_Type_boot
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Get_Board_Type
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Start
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Boot
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_debug
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_checkin_time
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_check_mainbinding_timedelay
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Version
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Step_debug_msg
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Special_attr
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Head_config_Msg
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_write_main_id_to_flash
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_check_is_binding_ok
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_check_Data_valid
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_main_id_timer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_main_id_
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Tryout_time_flash
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Send_main_flash_id_
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Get_head_id_
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Get_Binding_st_
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_can_error_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_loop
</UL>

<P><STRONG><a name="[13c]"></a>Command_exec_peripheral</STRONG> (Thumb, 1840 bytes, Stack size 32 bytes, main.o(i.Command_exec_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Command_exec_peripheral &rArr; Encoder_Probe &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_CMD_is_Support
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Enable
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Disable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_ctrl_ex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_On
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_Off
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Get_DirStatus
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Ecoder_dir_withzerodir
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_check_mainbinding_timedelay
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_steps_for_ACC_DEC
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKER_step_PWMDA_Set_val
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIFT_step_PWMDA_Set_val
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_check_Type
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_Parameter_with_motortype
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_setZero
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_setThreshold
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_setDir
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_rPos
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_maskZero
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_getZero
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_getCoder
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_autoZero
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_adjPosAll
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_adjPos
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Set_minsteps_rang
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Set_Goback_Steps
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Probe
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Get_state
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Get_Max_Steps
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Enable_mask
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Enable
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecode_CS_set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecode_CS_for_MT6813
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetVoltage_channel2
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetVoltage_channel1
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_is_MT6813PWM_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_base_DC24_zero
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ZeroStatus_log
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ZeroStatus
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SIG_PH_Status
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_loop
</UL>

<P><STRONG><a name="[15e]"></a>Command_exec_sysset</STRONG> (Thumb, 384 bytes, Stack size 8 bytes, main.o(i.Command_exec_sysset))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Command_exec_sysset &rArr; StepMotor_isr_exec &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_CMD_is_Support
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_get_Head_Mode
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_Set_zerotype_with_NO
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_Set_inputID_with_NO
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_Set_ID_Type_with_NO
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_isr_exec
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_with_Head_Mode
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Position
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Get_Zero_ST
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Get_Position
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Step_data
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_loop
</UL>

<P><STRONG><a name="[175]"></a>Command_exec_undefine</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.Command_exec_undefine))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_loop
</UL>

<P><STRONG><a name="[166]"></a>Command_exec_xzq</STRONG> (Thumb, 1306 bytes, Stack size 24 bytes, main.o(i.Command_exec_xzq))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Command_exec_xzq &rArr; Exec_Jacquard_ex &rArr; arch_Jacquard_Setup &rArr; arch_Set_check_JQD_YARN_ACT
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_CMD_is_Support
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_check_power_isok
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Get_ID
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_first_getinto_Knit_area
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Needle_isr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jacquard_blade_remap
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jacquard_Set_Blade
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jacquard_Init_blade
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jacquard_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jacquard_Get_jqdBlade
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jacquard_Get_Blade
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_base_DC24_zero
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_new_check_JQD_status
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Jacquard_ex
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Jacquard
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_JQD_GET_EX
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_loop
</UL>

<P><STRONG><a name="[173]"></a>Command_loop</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, main.o(i.Command_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = Command_loop &rArr; Command_exec_otherset &rArr; Upgrade_Boot &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_xzq
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_undefine
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_sysset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_dct
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_data_store
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_checkonline
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_alarm
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_Testcode
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[178]"></a>DAC_Cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_dac.o(i.DAC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_HardInit
</UL>

<P><STRONG><a name="[176]"></a>DAC_HardInit</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, adc.o(i.DAC_HardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DAC_HardInit &rArr; DAC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[177]"></a>DAC_Init</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, stm32f2xx_dac.o(i.DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_HardInit
</UL>

<P><STRONG><a name="[17a]"></a>DAC_SetChannel1Data</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f2xx_dac.o(i.DAC_SetChannel1Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DAC_SetChannel1Data
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetVoltage_channel1
</UL>

<P><STRONG><a name="[17c]"></a>DAC_SetChannel2Data</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f2xx_dac.o(i.DAC_SetChannel2Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DAC_SetChannel2Data
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetVoltage_channel2
</UL>

<P><STRONG><a name="[155]"></a>DAC_SetVoltage_channel1</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, adc.o(i.DAC_SetVoltage_channel1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DAC_SetVoltage_channel1 &rArr; DAC_SetChannel1Data
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_need_current_add
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SoftwareTriggerCmd
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel1Data
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_phi_with_stepno
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_phi
</UL>

<P><STRONG><a name="[156]"></a>DAC_SetVoltage_channel2</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, adc.o(i.DAC_SetVoltage_channel2))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DAC_SetVoltage_channel2 &rArr; DAC_SetChannel2Data
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_need_current_add
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel2Data
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_phi_with_stepno
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_phi
</UL>

<P><STRONG><a name="[17b]"></a>DAC_SoftwareTriggerCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_dac.o(i.DAC_SoftwareTriggerCmd))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetVoltage_channel1
</UL>

<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.DMA1_Stream0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.DMA1_Stream1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.DMA1_Stream2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.DMA1_Stream3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.DMA1_Stream4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.DMA1_Stream5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.DMA1_Stream6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.DMA1_Stream7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; arch_adc_isr &rArr; arch_adc_test &rArr; check_power_alert_is_coming
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_adc_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.DMA2_Stream1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.DMA2_Stream2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; arch_adc2_isr &rArr; arch_adc_test_DMA2_string2_ch1 &rArr; GPIO_SET_711_FAULT_AN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_adc2_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[359]"></a>DMA_ClearFlag</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_adc_test_DMA2_string2_ch1
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_adc_test
</UL>

<P><STRONG><a name="[80]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HardInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_HardInit
</UL>

<P><STRONG><a name="[7d]"></a>DMA_DeInit</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, stm32f2xx_dma.o(i.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HardInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_HardInit
</UL>

<P><STRONG><a name="[358]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f2xx_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_adc_test_DMA2_string2_ch1
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_adc_test
</UL>

<P><STRONG><a name="[87]"></a>DMA_ITConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f2xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HardInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_HardInit
</UL>

<P><STRONG><a name="[7f]"></a>DMA_Init</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, stm32f2xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HardInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_HardInit
</UL>

<P><STRONG><a name="[7e]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_dma.o(i.DMA_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HardInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_HardInit
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[17f]"></a>Decrypt_Data_withKey_Short</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, hq_can_key.o(i.Decrypt_Data_withKey_Short))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Decrypt_Data_withKey_Short &rArr; Get_Keydata_
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Keydata_
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt_can_data
</UL>

<P><STRONG><a name="[181]"></a>Decrypt_can_data</STRONG> (Thumb, 118 bytes, Stack size 36 bytes, hq_can_key.o(i.Decrypt_can_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Decrypt_can_data &rArr; Decrypt_Data_withKey_Short &rArr; Get_Keydata_
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt_Data_withKey_Short
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_data_sys_Key
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Read_data_with_sys_key
</UL>

<P><STRONG><a name="[195]"></a>EE_Init</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, eeprom.o(i.EE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EE_Init &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[19a]"></a>EE_Read</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, eeprom.o(i.EE_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EE_Read &rArr; EE_ReadVariable
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Read_data_with_sys_key
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_read_main_flash
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_read_binding_flag
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_read_app_last_ver
</UL>

<P><STRONG><a name="[196]"></a>EE_ReadVariable</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, eeprom.o(i.EE_ReadVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EE_ReadVariable
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_FindValidPage
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Read
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>

<P><STRONG><a name="[19b]"></a>EE_Write</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, eeprom.o(i.EE_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = EE_Write &rArr; EE_WriteVariable &rArr; EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Start
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_write_main_id_to_flash
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_data_sys_Key
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Upgrade_Set_Buf_Type
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_read_app_last_ver
</UL>

<P><STRONG><a name="[19d]"></a>EE_WriteVariable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, eeprom.o(i.EE_WriteVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = EE_WriteVariable &rArr; EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Write
</UL>

<P><STRONG><a name="[39f]"></a>EMF_Init</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, main.o(i.EMF_Init))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_init
</UL>

<P><STRONG><a name="[19f]"></a>EMF_autoclear_Timer_2ms</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, main.o(i.EMF_autoclear_Timer_2ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EMF_autoclear_Timer_2ms &rArr; arch_ACTEMF_Clear &rArr; arch_Clear_check_JQD_YARN_ACT &rArr; get_verydata_with_Arry
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARNEMF_Clear
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACTEMF_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_2ms_prog
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EXTI0_IRQHandler &rArr; hook_EXTI_isr &rArr; CheckOverloadBranch &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_EXTI_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EXTI15_10_IRQHandler &rArr; hook_EXTI_isr &rArr; CheckOverloadBranch &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_EXTI_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EXTI1_IRQHandler &rArr; hook_EXTI_isr &rArr; CheckOverloadBranch &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_EXTI_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EXTI2_IRQHandler &rArr; hook_EXTI_isr &rArr; CheckOverloadBranch &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_EXTI_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EXTI3_IRQHandler &rArr; hook_EXTI_isr &rArr; CheckOverloadBranch &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_EXTI_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.EXTI4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EXTI9_5_IRQHandler &rArr; hook_EXTI_isr &rArr; CheckOverloadBranch &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_EXTI_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1aa]"></a>EXTI_CHECK_iscomming</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, exti.o(i.EXTI_CHECK_iscomming))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EXTI_CHECK_iscomming &rArr; CheckOverloadBranch &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_CHECK_justcomming
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOverloadBranch
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM_sysclk_isr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ab]"></a>EXTI_CHECK_justcomming</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exti.o(i.EXTI_CHECK_justcomming))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_CHECK_iscomming
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_Overload_Check
</UL>

<P><STRONG><a name="[1b2]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_EXTI_isr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Enable
</UL>

<P><STRONG><a name="[1ac]"></a>EXTI_Config</STRONG> (Thumb, 474 bytes, Stack size 32 bytes, exti.o(i.EXTI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EXTI_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Disable
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_need_close711_alert
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[1b0]"></a>EXTI_Disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, exti.o(i.EXTI_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Exti_disable
</UL>

<P><STRONG><a name="[1b1]"></a>EXTI_Enable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, exti.o(i.EXTI_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Exti_enable
</UL>

<P><STRONG><a name="[37d]"></a>EXTI_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_EXTI_isr
</UL>

<P><STRONG><a name="[1af]"></a>EXTI_Init</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, stm32f2xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
</UL>

<P><STRONG><a name="[36b]"></a>EXT_NRST_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm32.o(i.EXT_NRST_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[1b3]"></a>EX_step_PWMDA_Set_val</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, time.o(i.EX_step_PWMDA_Set_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EX_step_PWMDA_Set_val
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CCR_Val_with_PWM_A
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_need_current_add
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_phi_with_stepno
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_phi
</UL>

<P><STRONG><a name="[147]"></a>Ecode_CS_for_MT6813</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, encoder.o(i.Ecode_CS_for_MT6813))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ecode_CS_for_MT6813 &rArr; Ecode_CS_set &rArr; SSI_Select_with_id &rArr; SSI_Select_ecode
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecode_CS_set
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM3_isr
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_pwm_timeout_loop
</UL>

<P><STRONG><a name="[15d]"></a>Ecode_CS_set</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, encoder.o(i.Ecode_CS_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ecode_CS_set &rArr; SSI_Select_with_id &rArr; SSI_Select_ecode
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Select_with_id
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Duty_Fre_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecode_CS_for_MT6813
</UL>

<P><STRONG><a name="[1b9]"></a>Ecode_cs_select_all</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, encoder.o(i.Ecode_cs_select_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ecode_cs_select_all &rArr; SSI_Select_all_ecode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Select_all_ecode
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_input_Config
</UL>

<P><STRONG><a name="[1a6]"></a>Encode_Error_Time_Check</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, encoder.o(i.Encode_Error_Time_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Encode_Error_Time_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_ticktime
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERead_Coder
</UL>

<P><STRONG><a name="[1a7]"></a>Encode_Stop_Time_Check</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, encoder.o(i.Encode_Stop_Time_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Encode_Stop_Time_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_ticktime
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERead_Coder
</UL>

<P><STRONG><a name="[148]"></a>Encoder_Enable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, encoder.o(i.Encoder_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[144]"></a>Encoder_Enable_mask</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, encoder.o(i.Encoder_Enable_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Encoder_Enable_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[143]"></a>Encoder_Get_Max_Steps</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, encoder.o(i.Encoder_Get_Max_Steps))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[154]"></a>Encoder_Get_state</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, encoder.o(i.Encoder_Get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Encoder_Get_state &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_in_Get_St
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[1bb]"></a>Encoder_Init</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, encoder.o(i.Encoder_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Encoder_Init &rArr; Encoder_Probe &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Read
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_setDir
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Probe
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bc]"></a>Encoder_Poll</STRONG> (Thumb, 514 bytes, Stack size 32 bytes, encoder.o(i.Encoder_Poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Encoder_Poll &rArr; EAuto_Zero &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_ticktime
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_send_log_ecode
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_is_MT6813PWM_Mode
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EReport_Error
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERead_Coder
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECheck_Pos
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECalc_rPos
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAuto_Zero
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Modfiy_Position
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Get_Running
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Get_Position_2
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Poll
</UL>

<P><STRONG><a name="[149]"></a>Encoder_Probe</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, encoder.o(i.Encoder_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Encoder_Probe &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERead_Coder
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init
</UL>

<P><STRONG><a name="[1bf]"></a>Encoder_Reset</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, encoder.o(i.Encoder_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Encoder_Reset &rArr; ECalc_rPos
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECalc_rPos
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
</UL>

<P><STRONG><a name="[1c0]"></a>Encoder_RunPos</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, encoder.o(i.Encoder_RunPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Encoder_RunPos &rArr; ECalc_rPos
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECalc_rPos
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
</UL>

<P><STRONG><a name="[141]"></a>Encoder_Set_Goback_Steps</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, encoder.o(i.Encoder_Set_Goback_Steps))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[23d]"></a>Encoder_Set_maxsteps_cw</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, encoder.o(i.Encoder_Set_maxsteps_cw))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Set_maxsteps_cw
</UL>

<P><STRONG><a name="[142]"></a>Encoder_Set_minsteps_rang</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, encoder.o(i.Encoder_Set_minsteps_rang))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Set_minsteps_ecode_rang
</UL>

<P><STRONG><a name="[27c]"></a>Encoder_Work</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, encoder.o(i.Encoder_Work))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_step_goon
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[152]"></a>Encoder_adjPos</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, encoder.o(i.Encoder_adjPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Encoder_adjPos &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_ticktime
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_setpos_2main_postion
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Get_Position_2
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_adjPosAll
</UL>

<P><STRONG><a name="[153]"></a>Encoder_adjPosAll</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, encoder.o(i.Encoder_adjPosAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Encoder_adjPosAll &rArr; Encoder_adjPos &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_adjPos
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_in_Get_St
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EReport_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[14b]"></a>Encoder_autoZero</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, encoder.o(i.Encoder_autoZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Encoder_autoZero &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[29e]"></a>Encoder_clear_restbit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, encoder.o(i.Encoder_clear_restbit))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[270]"></a>Encoder_deInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, encoder.o(i.Encoder_deInit))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Detect_Zero2
</UL>

<P><STRONG><a name="[14a]"></a>Encoder_getCoder</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, encoder.o(i.Encoder_getCoder))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[14e]"></a>Encoder_getZero</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, encoder.o(i.Encoder_getZero))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[18f]"></a>Encoder_in_Get_St</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, encoder.o(i.Encoder_in_Get_St))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_adjPosAll
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Get_state
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERead_Coder
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECheck_Pos
</UL>

<P><STRONG><a name="[14c]"></a>Encoder_maskZero</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, encoder.o(i.Encoder_maskZero))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[151]"></a>Encoder_rPos</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, encoder.o(i.Encoder_rPos))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Position
</UL>

<P><STRONG><a name="[379]"></a>Encoder_rechk_over</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, encoder.o(i.Encoder_rechk_over))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_step_goon
</UL>

<P><STRONG><a name="[c4]"></a>Encoder_sendError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, encoder.o(i.Encoder_sendError))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Encoder_sendError &rArr; Message_Send &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_alarm
</UL>

<P><STRONG><a name="[2aa]"></a>Encoder_setCheck</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, encoder.o(i.Encoder_setCheck))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[14f]"></a>Encoder_setDir</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, encoder.o(i.Encoder_setDir))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Setup_Direction
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_zero_dir
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Ecoder_dir_withzerodir
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_ResetDir_with_motortype
</UL>

<P><STRONG><a name="[2bc]"></a>Encoder_setSteps</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, encoder.o(i.Encoder_setSteps))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Setup_Resolution
</UL>

<P><STRONG><a name="[150]"></a>Encoder_setThreshold</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, encoder.o(i.Encoder_setThreshold))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[14d]"></a>Encoder_setZero</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, encoder.o(i.Encoder_setZero))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[2ed]"></a>Encoder_set_stepno</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, encoder.o(i.Encoder_set_stepno))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_SKmode2
</UL>

<P><STRONG><a name="[38f]"></a>Encoder_timeout_check_2ms</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, encoder.o(i.Encoder_timeout_check_2ms))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_time_2ms
</UL>

<P><STRONG><a name="[1c2]"></a>Encryption_Data_withKey_Short</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, hq_can_key.o(i.Encryption_Data_withKey_Short))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Encryption_Data_withKey_Short &rArr; Get_Keydata_
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Keydata_
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encryption_can_data
</UL>

<P><STRONG><a name="[1c3]"></a>Encryption_can_data</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, hq_can_key.o(i.Encryption_can_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Encryption_can_data &rArr; Encryption_Data_withKey_Short &rArr; Get_Keydata_
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encryption_Data_withKey_Short
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Read_data_with_sys_key
</UL>

<P><STRONG><a name="[1c4]"></a>Exec_Check_Resistance_Each</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, main.o(i.Exec_Check_Resistance_Each))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = Exec_Check_Resistance_Each &rArr; Exec_EMF_isr_EX &rArr; Exec_EMF &rArr; arch_YARNEMF_Setup &rArr; arch_YARN_Step_Setup &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_send_Operate_data
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Jacquard_ex
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_EMF_isr_EX
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c8]"></a>Exec_Check_Resistance_branch</STRONG> (Thumb, 504 bytes, Stack size 24 bytes, main.o(i.Exec_Check_Resistance_branch))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = Exec_Check_Resistance_branch &rArr; Exec_EMF_isr_EX &rArr; Exec_EMF &rArr; arch_YARNEMF_Setup &rArr; arch_YARN_Step_Setup &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Jacquard_ex
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_EMF_isr_EX
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c9]"></a>Exec_EMF</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, main.o(i.Exec_EMF))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Exec_EMF &rArr; arch_YARNEMF_Setup &rArr; arch_YARN_Step_Setup &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_ctr
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARNEMF_Setup
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Get_Test_act_id_
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACTEMF_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_EMF_YARN_
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_EMF_isr_EX
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_EMF_isr
</UL>

<P><STRONG><a name="[d6]"></a>Exec_EMF_GET_EX</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, main.o(i.Exec_EMF_GET_EX))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_dct
</UL>

<P><STRONG><a name="[d3]"></a>Exec_EMF_isr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.Exec_EMF_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Exec_EMF_isr &rArr; Exec_EMF &rArr; arch_YARNEMF_Setup &rArr; arch_YARN_Step_Setup &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_EMF
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_dct
</UL>

<P><STRONG><a name="[d5]"></a>Exec_EMF_isr_EX</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, main.o(i.Exec_EMF_isr_EX))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = Exec_EMF_isr_EX &rArr; Exec_EMF &rArr; arch_YARNEMF_Setup &rArr; arch_YARN_Step_Setup &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_EMF
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Check_Resistance_Each
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_dct
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Check_Resistance_branch
</UL>

<P><STRONG><a name="[1ce]"></a>Exec_GET_Moto_Zero_Width</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, step.o(i.Exec_GET_Moto_Zero_Width))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Exec_GET_Moto_Zero_Width &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Yarn_step_cmd
</UL>

<P><STRONG><a name="[138]"></a>Exec_Get_Binding_st_</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arch_stm32.o(i.Exec_Get_Binding_st_))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Exec_Get_Binding_st_ &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
</UL>

<P><STRONG><a name="[135]"></a>Exec_Get_head_id_</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arch_stm32.o(i.Exec_Get_head_id_))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Exec_Get_head_id_ &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
</UL>

<P><STRONG><a name="[171]"></a>Exec_JQD_GET_EX</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, main.o(i.Exec_JQD_GET_EX))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_xzq
</UL>

<P><STRONG><a name="[16b]"></a>Exec_Jacquard</STRONG> (Thumb, 174 bytes, Stack size 36 bytes, main.o(i.Exec_Jacquard))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Exec_Jacquard &rArr; Exec_Jqd_blade_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Jqd_blade_next
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_xzq
</UL>

<P><STRONG><a name="[170]"></a>Exec_Jacquard_ex</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, main.o(i.Exec_Jacquard_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Exec_Jacquard_ex &rArr; arch_Jacquard_Setup &rArr; arch_Set_check_JQD_YARN_ACT
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Check_Resistance_Each
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_xzq
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Check_Resistance_branch
</UL>

<P><STRONG><a name="[1d0]"></a>Exec_Jqd_blade_next</STRONG> (Thumb, 206 bytes, Stack size 36 bytes, main.o(i.Exec_Jqd_blade_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Exec_Jqd_blade_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_check_and_do_next_blade
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Jacquard
</UL>

<P><STRONG><a name="[d1]"></a>Exec_Read_data_with_sys_key</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, main.o(i.Exec_Read_data_with_sys_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Exec_Read_data_with_sys_key &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_ticktime
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encryption_can_data
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Read
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt_can_data
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_data_store
</UL>

<P><STRONG><a name="[1d2]"></a>Exec_Read_main_id_from_flash</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, arch_stm32.o(i.Exec_Read_main_id_from_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Exec_Read_main_id_from_flash &rArr; Exec_read_app_last_ver &rArr; EE_Write &rArr; EE_WriteVariable &rArr; EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_read_main_flash
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_read_binding_flag
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_read_app_last_ver
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_read_Tryout_time_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_main_head_board_id_init
</UL>

<P><STRONG><a name="[1d7]"></a>Exec_Reset_step_moto_all</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, step.o(i.Exec_Reset_step_moto_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Exec_Reset_step_moto_all &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Yarn_step_cmd
</UL>

<P><STRONG><a name="[1d8]"></a>Exec_Reset_step_moto_one</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, step.o(i.Exec_Reset_step_moto_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Exec_Reset_step_moto_one &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Yarn_step_cmd
</UL>

<P><STRONG><a name="[1d9]"></a>Exec_SET_DCT_sts</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, step.o(i.Exec_SET_DCT_sts))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Exec_SET_DCT_sts
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepspeed_Q2R
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Yarn_step_cmd
</UL>

<P><STRONG><a name="[1db]"></a>Exec_SET_Moto_Zero_Width</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, step.o(i.Exec_SET_Moto_Zero_Width))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Exec_SET_Moto_Zero_Width
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Yarn_step_cmd
</UL>

<P><STRONG><a name="[133]"></a>Exec_Send_main_flash_id_</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, arch_stm32.o(i.Exec_Send_main_flash_id_))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Exec_Send_main_flash_id_ &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_read_main_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
</UL>

<P><STRONG><a name="[fa]"></a>Exec_Set_DDM_need_Check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, step.o(i.Exec_Set_DDM_need_Check))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[15a]"></a>Exec_Set_Motor_Curr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.Exec_Set_Motor_Curr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Exec_Set_Motor_Curr &rArr; Exec_Set_Motor_Curr_phi &rArr; DAC_SetVoltage_channel2 &rArr; DAC_SetChannel2Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_phi
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_data
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[1dc]"></a>Exec_Set_Motor_Curr_data</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.Exec_Set_Motor_Curr_data))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_with_stepno
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr
</UL>

<P><STRONG><a name="[1dd]"></a>Exec_Set_Motor_Curr_phi</STRONG> (Thumb, 746 bytes, Stack size 8 bytes, main.o(i.Exec_Set_Motor_Curr_phi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Exec_Set_Motor_Curr_phi &rArr; DAC_SetVoltage_channel2 &rArr; DAC_SetChannel2Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_set_Step_PWM_A
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yarn_step_PWMDA_Set_val
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKER_step_PWMDA_Set_val
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIFT_step_PWMDA_Set_val
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_step_PWMDA_Set_val
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetVoltage_channel2
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetVoltage_channel1
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_reback_curr
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Add_curr
</UL>

<P><STRONG><a name="[1e0]"></a>Exec_Set_Motor_Curr_phi_with_stepno</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, main.o(i.Exec_Set_Motor_Curr_phi_with_stepno))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Exec_Set_Motor_Curr_phi_with_stepno &rArr; DAC_SetVoltage_channel2 &rArr; DAC_SetChannel2Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yarn_step_PWMDA_Set_val
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKER_step_PWMDA_Set_val
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIFT_step_PWMDA_Set_val
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_step_PWMDA_Set_val
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetVoltage_channel2
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetVoltage_channel1
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_with_stepno
</UL>

<P><STRONG><a name="[1e1]"></a>Exec_Set_Motor_Curr_with_stepno</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.Exec_Set_Motor_Curr_with_stepno))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Exec_Set_Motor_Curr_with_stepno &rArr; Exec_Set_Motor_Curr_phi_with_stepno &rArr; DAC_SetVoltage_channel2 &rArr; DAC_SetChannel2Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_phi_with_stepno
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_set_Step_Current_with_motortype
</UL>

<P><STRONG><a name="[1e2]"></a>Exec_Set_Motor_RestSpeed_with_stepno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Exec_Set_Motor_RestSpeed_with_stepno))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Speed_EX
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_set_Step_ResetSpeed_with_motortype
</UL>

<P><STRONG><a name="[1e3]"></a>Exec_Set_Motor_RunSpeed_with_stepno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Exec_Set_Motor_RunSpeed_with_stepno))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Speed_EX
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_set_Step_RunSpeed_with_motortype
</UL>

<P><STRONG><a name="[1e7]"></a>Exec_Set_Step_Enable_with_motortype</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, step.o(i.Exec_Set_Step_Enable_with_motortype))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Exec_Set_Step_Enable_with_motortype
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_Parameter_with_motortype
</UL>

<P><STRONG><a name="[1e8]"></a>Exec_Set_Step_Fastmode_with_motortype</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, step.o(i.Exec_Set_Step_Fastmode_with_motortype))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Exec_Set_Step_Fastmode_with_motortype
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_Parameter_with_motortype
</UL>

<P><STRONG><a name="[1e4]"></a>Exec_Set_Step_LostAlert_with_motortype</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, step.o(i.Exec_Set_Step_LostAlert_with_motortype))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Exec_Set_Step_LostAlert_with_motortype
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Motor_Set_Check_all
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_Parameter_with_motortype
</UL>

<P><STRONG><a name="[15b]"></a>Exec_Set_Step_Parameter_with_motortype</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, step.o(i.Exec_Set_Step_Parameter_with_motortype))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Exec_Set_Step_Parameter_with_motortype &rArr; Exec_set_Step_Current_with_motortype &rArr; Exec_Set_Motor_Curr_with_stepno &rArr; Exec_Set_Motor_Curr_phi_with_stepno &rArr; DAC_SetVoltage_channel2 &rArr; DAC_SetChannel2Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_set_Step_RunSpeed_with_motortype
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_set_Step_ResetSpeed_with_motortype
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_set_Step_Current_with_motortype
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_RunDir_with_motortype
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_ResetDir_with_motortype
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_Poweron_with_motortype
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_LostAlert_with_motortype
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_Fastmode_with_motortype
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_Enable_with_motortype
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[1e5]"></a>Exec_Set_Step_Poweron_with_motortype</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, step.o(i.Exec_Set_Step_Poweron_with_motortype))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Exec_Set_Step_Poweron_with_motortype &rArr; arch_StepMotor_Enable_onestepmoto
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Enable_onestepmoto
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Disable_onestepmoto
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_Parameter_with_motortype
</UL>

<P><STRONG><a name="[1ec]"></a>Exec_Set_Step_ResetDir_with_motortype</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, step.o(i.Exec_Set_Step_ResetDir_with_motortype))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Exec_Set_Step_ResetDir_with_motortype
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_setDir
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_Parameter_with_motortype
</UL>

<P><STRONG><a name="[1e6]"></a>Exec_Set_Step_RunDir_with_motortype</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, step.o(i.Exec_Set_Step_RunDir_with_motortype))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Exec_Set_Step_RunDir_with_motortype
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_Parameter_with_motortype
</UL>

<P><STRONG><a name="[f9]"></a>Exec_Set_Step_check_Type</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, step.o(i.Exec_Set_Step_check_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Exec_Set_Step_check_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[139]"></a>Exec_Set_Tryout_time_flash</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, arch_stm32.o(i.Exec_Set_Tryout_time_flash))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
</UL>

<P><STRONG><a name="[132]"></a>Exec_Set_main_id_</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arch_stm32.o(i.Exec_Set_main_id_))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
</UL>

<P><STRONG><a name="[134]"></a>Exec_Set_main_id_timer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm32.o(i.Exec_Set_main_id_timer))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
</UL>

<P><STRONG><a name="[111]"></a>Exec_Triangle_step</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, step.o(i.Exec_Triangle_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Exec_Triangle_step &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_HP_ACTION_Step
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_st_with_postion
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[d0]"></a>Exec_Write_data_sys_Key</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, main.o(i.Exec_Write_data_sys_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Exec_Write_data_sys_Key &rArr; EE_Write &rArr; EE_WriteVariable &rArr; EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Write
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt_can_data
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_data_store
</UL>

<P><STRONG><a name="[10f]"></a>Exec_Yarn_step_cmd</STRONG> (Thumb, 444 bytes, Stack size 24 bytes, main.o(i.Exec_Yarn_step_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Exec_Yarn_step_cmd &rArr; Exec_Reset_step_moto_all &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_yarnstep_sign_
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_check_power_isok
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yarn_step_PWMDA_Set_val
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Motor_Set_Check_all
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Setup_Yarnstep_Active
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Speed
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Reset_Speed
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Check_Zeroinput_and_alert
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_SET_Moto_Zero_Width
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_SET_DCT_sts
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Reset_step_moto_one
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Reset_step_moto_all
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_GET_Moto_Zero_Width
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[c8]"></a>Exec_alarm_check_end</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, main.o(i.Exec_alarm_check_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = Exec_alarm_check_end &rArr; exec_EMF_YARN_ &rArr; Exec_EMF &rArr; arch_YARNEMF_Setup &rArr; arch_YARN_Step_Setup &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sti_done
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sinker_done
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Get_DirStatus
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_send_log_ecode
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_EMF_YARN_
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_alarm
</UL>

<P><STRONG><a name="[ca]"></a>Exec_alarm_check_start</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.Exec_alarm_check_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Exec_alarm_check_start &rArr; arch_Get_DirStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Get_DirStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_alarm
</UL>

<P><STRONG><a name="[c9]"></a>Exec_alarm_shock</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, main.o(i.Exec_alarm_shock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Exec_alarm_shock &rArr; arch_shock_reset &rArr; arch_shock_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_reset
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_activate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_shock_board
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_set_shock_PWM
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_alarm
</UL>

<P><STRONG><a name="[136]"></a>Exec_check_Data_valid</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, arch_stm32.o(i.Exec_check_Data_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Exec_check_Data_valid &rArr; IDMASK
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
</UL>

<P><STRONG><a name="[1fc]"></a>Exec_check_and_do_next_blade</STRONG> (Thumb, 124 bytes, Stack size 28 bytes, main.o(i.Exec_check_and_do_next_blade))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Exec_check_and_do_next_blade &rArr; Exec_Jqd_blade_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Jqd_blade_next
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_JQD_isr_timer_cnt_50us
</UL>

<P><STRONG><a name="[137]"></a>Exec_check_is_binding_ok</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, arch_stm32.o(i.Exec_check_is_binding_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Exec_check_is_binding_ok &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_2ms_check_binding
</UL>

<P><STRONG><a name="[1fe]"></a>Exec_main_head_board_id_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, arch_stm32.o(i.Exec_main_head_board_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Exec_main_head_board_id_init &rArr; Exec_Read_main_id_from_flash &rArr; Exec_read_app_last_ver &rArr; EE_Write &rArr; EE_WriteVariable &rArr; EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMcu_IDCode
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Read_main_id_from_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[16e]"></a>Exec_new_check_JQD_status</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, main.o(i.Exec_new_check_JQD_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Exec_new_check_JQD_status &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_xzq
</UL>

<P><STRONG><a name="[1d6]"></a>Exec_read_Tryout_time_flash</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, arch_stm32.o(i.Exec_read_Tryout_time_flash))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Read_main_id_from_flash
</UL>

<P><STRONG><a name="[1d5]"></a>Exec_read_app_last_ver</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, arch_stm32.o(i.Exec_read_app_last_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Exec_read_app_last_ver &rArr; EE_Write &rArr; EE_WriteVariable &rArr; EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Write
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Read_main_id_from_flash
</UL>

<P><STRONG><a name="[1d4]"></a>Exec_read_binding_flag</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, arch_stm32.o(i.Exec_read_binding_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Exec_read_binding_flag &rArr; EE_Read &rArr; EE_ReadVariable
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Read_main_id_from_flash
</UL>

<P><STRONG><a name="[1d3]"></a>Exec_read_main_flash</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, arch_stm32.o(i.Exec_read_main_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Exec_read_main_flash &rArr; EE_Read &rArr; EE_ReadVariable
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Send_main_flash_id_
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Read_main_id_from_flash
</UL>

<P><STRONG><a name="[1e9]"></a>Exec_set_Step_Current_with_motortype</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, step.o(i.Exec_set_Step_Current_with_motortype))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Exec_set_Step_Current_with_motortype &rArr; Exec_Set_Motor_Curr_with_stepno &rArr; Exec_Set_Motor_Curr_phi_with_stepno &rArr; DAC_SetVoltage_channel2 &rArr; DAC_SetChannel2Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_with_stepno
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_Parameter_with_motortype
</UL>

<P><STRONG><a name="[1ea]"></a>Exec_set_Step_ResetSpeed_with_motortype</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, step.o(i.Exec_set_Step_ResetSpeed_with_motortype))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Exec_set_Step_ResetSpeed_with_motortype
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_RestSpeed_with_stepno
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_Parameter_with_motortype
</UL>

<P><STRONG><a name="[1eb]"></a>Exec_set_Step_RunSpeed_with_motortype</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, step.o(i.Exec_set_Step_RunSpeed_with_motortype))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Exec_set_Step_RunSpeed_with_motortype
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_RunSpeed_with_stepno
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_Parameter_with_motortype
</UL>

<P><STRONG><a name="[131]"></a>Exec_write_main_id_to_flash</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, arch_stm32.o(i.Exec_write_main_id_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Exec_write_main_id_to_flash &rArr; EE_Write &rArr; EE_WriteVariable &rArr; EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Write
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
</UL>

<P><STRONG><a name="[193]"></a>FLASH_EraseSector</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, stm32f2xx_flash.o(i.FLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_program
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_EraseSector_boot
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>

<P><STRONG><a name="[202]"></a>FLASH_GetStatus</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f2xx_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.FLASH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[19e]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Write
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_program
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_EraseSector_boot
</UL>

<P><STRONG><a name="[230]"></a>FLASH_OB_GetRDP</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_flash.o(i.FLASH_OB_GetRDP))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jtag_Security_State
</UL>

<P><STRONG><a name="[255]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_flash.o(i.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[194]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f2xx_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_program
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>

<P><STRONG><a name="[256]"></a>FLASH_SetLatency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[19c]"></a>FLASH_Unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Write
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_program
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_EraseSector_boot
</UL>

<P><STRONG><a name="[201]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f2xx_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>

<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.FSMC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[203]"></a>FSMC_Init</STRONG> (Thumb, 86 bytes, Stack size 96 bytes, fsmc.o(i.FSMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FSMC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[206]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Init
</UL>

<P><STRONG><a name="[205]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Init
</UL>

<P><STRONG><a name="[207]"></a>GPIO_Configuration</STRONG> (Thumb, 952 bytes, Stack size 48 bytes, gpio.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[20a]"></a>GPIO_Configuration_PB9ctr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gpio.o(i.GPIO_Configuration_PB9ctr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_Configuration_PB9ctr &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[20b]"></a>GPIO_Configuration_powerctr</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, gpio.o(i.GPIO_Configuration_powerctr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_Configuration_powerctr &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[20c]"></a>GPIO_EX_E690Board</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, gpio.o(i.GPIO_EX_E690Board))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_EX_E690Board &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[209]"></a>GPIO_Init</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, stm32f2xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_PB4_config_def
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_711_FAULT_AN
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_cfg_EXP_Board_
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_cfg_E499Board_
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EX_E690Board
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration_powerctr
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration_PB9ctr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[208]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_PB4_config_def
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_cfg_EXP_Board_
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[214]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_error
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_EXTI_isr
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Read
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_dir2
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_dir1
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Get_DirStatus
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TZ_error_st
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ErrorStatus
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ctr_fan_with_temp_
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_GetBoardID_E480
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_GetBoardID
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_EXP_Board_E490
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CPLD_Ver_E490
</UL>

<P><STRONG><a name="[264]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Read
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Disable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_ctrl_ex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_On
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Set_UMS
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Pulse
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Half
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Disable_onestepmoto
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Dir
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_enable
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_LED_On
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_FAN_OFF
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Select_ecode
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Select_all_ecode
</UL>

<P><STRONG><a name="[20d]"></a>GPIO_SET_711_FAULT_AN</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SET_711_FAULT_AN))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_SET_711_FAULT_AN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_adc_test_DMA2_string2_ch1
</UL>

<P><STRONG><a name="[260]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Enable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_ctrl_ex
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_Off
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Set_UMS
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Pulse
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Half
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Enable_onestepmoto
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Dir
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_enable
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_LED_Off
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_FAN_ON
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Select_ecode
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_DeSelect_ecode
</UL>

<P><STRONG><a name="[1ff]"></a>GetMcu_IDCode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arch_stm32.o(i.GetMcu_IDCode))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_main_head_board_id_init
</UL>

<P><STRONG><a name="[20e]"></a>Get_Build_Time</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ver.o(i.Get_Build_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Get_Build_Time &rArr; Get_SYS_Data_Time &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SYS_Data_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>Get_CAN_Last_ErrorCode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(i.Get_CAN_Last_ErrorCode))
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetLastErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_error_printf
</UL>

<P><STRONG><a name="[ac]"></a>Get_CAN_err_cnt</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, can.o(i.Get_CAN_err_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_CAN_err_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetReceiveErrorCounter
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetLSBTransmitErrorCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_can_error_msg
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_error_printf
</UL>

<P><STRONG><a name="[213]"></a>Get_CPLD_Ver_E490</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, arch_stm32.o(i.Get_CPLD_Ver_E490))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_CPLD_Ver_E490
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cpld_Name_Ver
</UL>

<P><STRONG><a name="[215]"></a>Get_Cpld_Name_Ver</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, arch_stm32.o(i.Get_Cpld_Name_Ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Get_Cpld_Name_Ver &rArr; Get_EXP_Board_E490
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_EXP_Board_E490
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CPLD_Ver_E490
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[3a2]"></a>Get_Duty_Fre_</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, time.o(i.Get_Duty_Fre_))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_pwm_timeout_loop
</UL>

<P><STRONG><a name="[216]"></a>Get_EXP_Board_E490</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, arch_stm32.o(i.Get_EXP_Board_E490))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_EXP_Board_E490
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cpld_Name_Ver
</UL>

<P><STRONG><a name="[c3]"></a>Get_ErrorStatus</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, arch_stm32.o(i.Get_ErrorStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_ErrorStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_alarm
</UL>

<P><STRONG><a name="[130]"></a>Get_Head_config_Msg</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, arch_stm32.o(i.Get_Head_config_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Get_Head_config_Msg &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
</UL>

<P><STRONG><a name="[180]"></a>Get_Keydata_</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, hq_can_key.o(i.Get_Keydata_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Keydata_
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encryption_Data_withKey_Short
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt_Data_withKey_Short
</UL>

<P><STRONG><a name="[38e]"></a>Get_Overload_Status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, arch_stm32.o(i.Get_Overload_Status))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_time_2ms
</UL>

<P><STRONG><a name="[159]"></a>Get_SIG_PH_Status</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(i.Get_SIG_PH_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Get_SIG_PH_Status &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[218]"></a>Get_STEPMOTO_add</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, step.o(i.Get_STEPMOTO_add))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Step_Motor_TO_Which_Postion
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ZeroStatus_log
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ZeroStatus
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_StepType
</UL>

<P><STRONG><a name="[20f]"></a>Get_SYS_Data_Time</STRONG> (Thumb, 174 bytes, Stack size 112 bytes, ver.o(i.Get_SYS_Data_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Get_SYS_Data_Time &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Build_Time
</UL>

<P><STRONG><a name="[37b]"></a>Get_Sector_address_with_SecNo</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, upgrade.o(i.Get_Sector_address_with_SecNo))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_program
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_EraseSector_boot
</UL>

<P><STRONG><a name="[124]"></a>Get_Special_attr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ver.o(i.Get_Special_attr))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
</UL>

<P><STRONG><a name="[e2]"></a>Get_Status_StepType</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, main.o(i.Get_Status_StepType))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Get_Status_StepType &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Work_mid_layer
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_STEPMOTO_add
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[e1]"></a>Get_Status_StepType_sig</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, main.o(i.Get_Status_StepType_sig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Get_Status_StepType_sig &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Work_mid_layer
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_zeroID_with_IDself
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_zeroID_cfg_with_IDself
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_workID_with_IDself
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_workID_cfg_with_IDself
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Get_input_error
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Get_Position
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Get_Busyidx
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_StepMotor_isveryenable_IDself
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[df]"></a>Get_StepMotor_isveryenable_IDall</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, step.o(i.Get_StepMotor_isveryenable_IDall))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[104]"></a>Get_StepMotor_isveryenable_IDself</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, step.o(i.Get_StepMotor_isveryenable_IDself))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ZeroWorkStatus_StepType_sig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_StepType_sig
</UL>

<P><STRONG><a name="[165]"></a>Get_Step_data</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, step.o(i.Get_Step_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Get_Step_data &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_sysset
</UL>

<P><STRONG><a name="[12f]"></a>Get_Step_debug_msg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, step.o(i.Get_Step_debug_msg))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
</UL>

<P><STRONG><a name="[220]"></a>Get_TZ_error_st</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, arch_stm32.o(i.Get_TZ_error_st))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_TZ_error_st
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanzhen_zt_get
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_error
</UL>

<P><STRONG><a name="[125]"></a>Get_Version</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ver.o(i.Get_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_Version &rArr; Jtag_Security_State
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_System
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jtag_Security_State
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[13f]"></a>Get_ZeroStatus</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, main.o(i.Get_ZeroStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Get_ZeroStatus &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Work_mid_layer
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_STEPMOTO_add
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[140]"></a>Get_ZeroStatus_log</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, main.o(i.Get_ZeroStatus_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Get_ZeroStatus_log &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Work_mid_layer
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_STEPMOTO_add
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[108]"></a>Get_ZeroWorkStatus_StepType_sig</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, main.o(i.Get_ZeroWorkStatus_StepType_sig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Get_ZeroWorkStatus_StepType_sig &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Work_mid_layer
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_zeroID_with_IDself
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_zeroID_cfg_with_IDself
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_workID_with_IDself
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_workID_cfg_with_IDself
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_StepMotor_isveryenable_IDself
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[33c]"></a>Get_alarm_status_withMASK</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arch_stm32.o(i.Get_alarm_status_withMASK))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARN_Overload_Check
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_Overload_Check
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_AD24_Overload_Check
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACT_Overload_Check
</UL>

<P><STRONG><a name="[d4]"></a>Get_base_DC24_zero</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.Get_base_DC24_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_base_DC24_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_ad_base_cur_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_xzq
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_dct
</UL>

<P><STRONG><a name="[12e]"></a>Get_can_error_msg</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.Get_can_error_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Get_can_error_msg &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SendMessage
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CAN_err_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
</UL>

<P><STRONG><a name="[261]"></a>Get_code_data_from_mem</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, encoder.o(i.Get_code_data_from_mem))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Read
</UL>

<P><STRONG><a name="[2ea]"></a>Get_id_self_with_StepType</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, step.o(i.Get_id_self_with_StepType))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_Set_ID_Type_with_NO
</UL>

<P><STRONG><a name="[225]"></a>Get_interval_time_100us</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, time.o(i.Get_interval_time_100us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_interval_time_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
</UL>

<P><STRONG><a name="[1f0]"></a>Get_st_with_postion</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, step.o(i.Get_st_with_postion))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Triangle_step
</UL>

<P><STRONG><a name="[227]"></a>Get_systime_100us</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, time.o(i.Get_systime_100us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_systime_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_DD_config
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
</UL>

<P><STRONG><a name="[228]"></a>Get_zero_work_area</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, step.o(i.Get_zero_work_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_zero_work_area
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepspeed_Q2R
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
</UL>

<P><STRONG><a name="[229]"></a>Gpio_PB4_config_def</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gpio.o(i.Gpio_PB4_config_def))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Gpio_PB4_config_def &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22a]"></a>Gpio_cfg_E499Board_</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gpio.o(i.Gpio_cfg_E499Board_))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Gpio_cfg_E499Board_ &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[22b]"></a>Gpio_cfg_EXP_Board_</STRONG> (Thumb, 744 bytes, Stack size 48 bytes, gpio.o(i.Gpio_cfg_EXP_Board_))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Gpio_cfg_EXP_Board_ &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[363]"></a>Gpio_cfg_yarn_</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio.o(i.Gpio_cfg_yarn_))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HardFault_Handler &rArr; alert_cpu_fatal &rArr; Message_Send_Alert &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_cpu_fatal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.I2C1_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.I2C1_EV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.I2C2_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.I2C2_EV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1fb]"></a>IDMASK</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, arch_stm32.o(i.IDMASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IDMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_check_Data_valid
</UL>

<P><STRONG><a name="[22c]"></a>JQD_Data_Init</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, main.o(i.JQD_Data_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = JQD_Data_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_tenBladeSelector_Board
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_init
</UL>

<P><STRONG><a name="[22e]"></a>JQD_Init_delay_Timer_2ms</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(i.JQD_Init_delay_Timer_2ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = JQD_Init_delay_Timer_2ms &rArr; Jacquard_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jacquard_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_2ms_prog
</UL>

<P><STRONG><a name="[3a7]"></a>JQD_autoclear_Timer_2ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.JQD_autoclear_Timer_2ms))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_2ms_prog
</UL>

<P><STRONG><a name="[16c]"></a>Jacquard_Get_Blade</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Jacquard_Get_Blade))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_xzq
</UL>

<P><STRONG><a name="[16d]"></a>Jacquard_Get_jqdBlade</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Jacquard_Get_jqdBlade))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_xzq
</UL>

<P><STRONG><a name="[168]"></a>Jacquard_Init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, main.o(i.Jacquard_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Jacquard_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_xzq
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JQD_Init_delay_Timer_2ms
</UL>

<P><STRONG><a name="[167]"></a>Jacquard_Init_blade</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, main.o(i.Jacquard_Init_blade))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Jacquard_Init_blade
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_xzq
</UL>

<P><STRONG><a name="[16f]"></a>Jacquard_Set_Blade</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.Jacquard_Set_Blade))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_xzq
</UL>

<P><STRONG><a name="[172]"></a>Jacquard_blade_remap</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, main.o(i.Jacquard_blade_remap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Jacquard_blade_remap
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_setup_Jacquard_blade_map
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_xzq
</UL>

<P><STRONG><a name="[222]"></a>Jtag_Security_State</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, arch_stm32.o(i.Jtag_Security_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Jtag_Security_State
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetRDP
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Version
</UL>

<P><STRONG><a name="[157]"></a>LIFT_step_PWMDA_Set_val</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, time.o(i.LIFT_step_PWMDA_Set_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LIFT_step_PWMDA_Set_val
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CCR_Val_with_PWM_A
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_need_current_add
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_phi_with_stepno
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_phi
</UL>

<P><STRONG><a name="[36d]"></a>MainboardUnlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm32.o(i.MainboardUnlock))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MemManage_Handler &rArr; alert_cpu_fatal &rArr; Message_Send_Alert &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_cpu_fatal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[232]"></a>Message_Count</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, massage.o(i.Message_Count))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Push
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Pop
</UL>

<P><STRONG><a name="[237]"></a>Message_Count_Tx</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, massage.o(i.Message_Count_Tx))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_TX_Push
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_TX_Pop
</UL>

<P><STRONG><a name="[3a0]"></a>Message_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, massage.o(i.Message_Init))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_init
</UL>

<P><STRONG><a name="[174]"></a>Message_Pop</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, massage.o(i.Message_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Message_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_loop
</UL>

<P><STRONG><a name="[233]"></a>Message_Push</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, massage.o(i.Message_Push))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Message_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_CAN_isr
</UL>

<P><STRONG><a name="[c2]"></a>Message_Send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, massage.o(i.Message_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Message_Send &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_alarm
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_sendError
</UL>

<P><STRONG><a name="[b0]"></a>Message_Send_4halfword</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, massage.o(i.Message_Send_4halfword))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_xzq
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_sysset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_dct
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_checkonline
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_alarm
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_Testcode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_CMD_is_Support
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanzhen_zt_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_send_Operate_data
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_char_loop
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Speed_report
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_DD_config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_coder_info
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Step_data
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Head_config_Msg
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_write_main_id_to_flash
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Send_main_flash_id_
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Get_head_id_
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Get_Binding_st_
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_GET_Moto_Zero_Width
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_adjPos
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Get_state
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkin_need_send_data
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_check_online_f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Yarn_step_cmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_data_sys_Key
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Read_data_with_sys_key
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Check_Resistance_branch
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMsg_autoZero
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yarn_motor_input_bits_send
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_check_p2n_step_adj
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_afterrun_toreport
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Signal_edge_toreport
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[93]"></a>Message_Send_Alert</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, massage.o(i.Message_Send_Alert))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Message_Send_Alert &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SendMessage
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Get_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_cpu_fatal
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alert_Poll
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Boot
</UL>

<P><STRONG><a name="[234]"></a>Message_Send_immediately</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, massage.o(i.Message_Send_immediately))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Message_Send_immediately &rArr; arch_SendMessage_immediately &rArr; can_SendMessage &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SendMessage_immediately
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Boot
</UL>

<P><STRONG><a name="[236]"></a>Message_TX_Pop</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, massage.o(i.Message_TX_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Message_TX_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Count_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SendMessage_with_main
</UL>

<P><STRONG><a name="[238]"></a>Message_TX_Push</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, massage.o(i.Message_TX_Push))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Count_Tx
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SendMessage_with_main
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SendMessage
</UL>

<P><STRONG><a name="[34b]"></a>Message_TX_rpt_next</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, massage.o(i.Message_TX_rpt_next))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SendMessage_with_main
</UL>

<P><STRONG><a name="[23a]"></a>Message_send_Count</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, massage.o(i.Message_send_Count))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_send_Pop
</UL>

<P><STRONG><a name="[239]"></a>Message_send_Pop</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, massage.o(i.Message_send_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Message_send_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_send_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_can_tx_2ms_isr
</UL>

<P><STRONG><a name="[23b]"></a>Message_send_log_LX</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, massage.o(i.Message_send_log_LX))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Stop
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_250us_zero_change
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_check_through_zero_adj
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_check_LX_actstep_adj
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[1bd]"></a>Message_send_log_ecode</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, massage.o(i.Message_send_log_ecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Message_send_log_ecode &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SendMessage
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Get_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARNEMF_Setup
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACTEMF_Setup
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_alarm_check_end
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Poll
</UL>

<P><STRONG><a name="[1f3]"></a>Motor_Check_Zeroinput_and_alert</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, step.o(i.Motor_Check_Zeroinput_and_alert))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Motor_Check_Zeroinput_and_alert &rArr; Motor_set_input_checkarg
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_set_input_checkarg
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Yarn_step_cmd
</UL>

<P><STRONG><a name="[ff]"></a>Motor_Get_All_postion</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, step.o(i.Motor_Get_All_postion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_Get_All_postion
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[fd]"></a>Motor_Set_DM_Type</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, step.o(i.Motor_Set_DM_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Motor_Set_DM_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[fe]"></a>Motor_Set_DM_check_area</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, step.o(i.Motor_Set_DM_check_area))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[fb]"></a>Motor_Set_maxsteps_cw</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, step.o(i.Motor_Set_maxsteps_cw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor_Set_maxsteps_cw
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Set_maxsteps_cw
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[fc]"></a>Motor_Set_minsteps_ecode_rang</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, step.o(i.Motor_Set_minsteps_ecode_rang))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor_Set_minsteps_ecode_rang
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Set_minsteps_rang
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[da]"></a>Motor_bind_cmd_set</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, step.o(i.Motor_bind_cmd_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Motor_bind_cmd_set &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[23e]"></a>Motor_bind_exec_loop</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, step.o(i.Motor_bind_exec_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = Motor_bind_exec_loop &rArr; StepMotor_isr_exec &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_isr_exec
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Get_Zero_ST
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Get_Busyidx
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_is_binding_exec_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3aa]"></a>Motor_bind_timer_isr</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, step.o(i.Motor_bind_timer_isr))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_2ms_prog
</UL>

<P><STRONG><a name="[23f]"></a>Motor_is_binding_exec_set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, step.o(i.Motor_is_binding_exec_set))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_bind_exec_loop
</UL>

<P><STRONG><a name="[e4]"></a>Motor_is_doing_bind_cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, step.o(i.Motor_is_doing_bind_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[23c]"></a>Motor_set_input_checkarg</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, step.o(i.Motor_set_input_checkarg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Motor_set_input_checkarg
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Check_Zeroinput_and_alert
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = NMI_Handler &rArr; alert_cpu_fatal &rArr; Message_Send_Alert &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_cpu_fatal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[240]"></a>NVIC_Configuration</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, arch_stm32.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[88]"></a>NVIC_Init</STRONG> (Thumb, 112 bytes, Stack size 4 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_input_Config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HardInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_HardInit
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_PWM_init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
</UL>

<P><STRONG><a name="[241]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[242]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[16a]"></a>Needle_isr</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, main.o(i.Needle_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Needle_isr &rArr; check_lift_step_isstop &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lift_step_isstop
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_xzq
</UL>

<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.OTG_FS_WKUP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>OverLoad_Setup</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arch_stm32.o(i.OverLoad_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OverLoad_Setup &rArr; arch_Exti_enable &rArr; EXTI_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Exti_enable
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Exti_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_alarm
</UL>

<P><STRONG><a name="[3a1]"></a>Overload_Init</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, arch_stm32.o(i.Overload_Init))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_init
</UL>

<P><STRONG><a name="[246]"></a>Overload_Poll</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, arch_stm32.o(i.Overload_Poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = Overload_Poll &rArr; Overload_is_reCheck &rArr; arch_YARN_Overload_Check &rArr; arch_YARNEMF_Setup &rArr; arch_YARN_Step_Setup &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_istimeout
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_is_reCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[249]"></a>Overload_is_come</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, arch_stm32.o(i.Overload_is_come))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Overload_is_come
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_ticktime
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_EXTI_isr
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_adc2_isr
</UL>

<P><STRONG><a name="[248]"></a>Overload_is_reCheck</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, arch_stm32.o(i.Overload_is_reCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = Overload_is_reCheck &rArr; arch_YARN_Overload_Check &rArr; arch_YARNEMF_Setup &rArr; arch_YARN_Step_Setup &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_power_IC_fault_check
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_overload_check_poweroff_
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARN_Overload_Check
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_Overload_Check
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_AD24_Overload_Check
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACT_Overload_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_Poll
</UL>

<P><STRONG><a name="[247]"></a>Overload_istimeout</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, arch_stm32.o(i.Overload_istimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Overload_istimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_ticktime
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_Poll
</UL>

<P><STRONG><a name="[250]"></a>Overload_recheck_finish</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, arch_stm32.o(i.Overload_recheck_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Overload_recheck_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_ticktime
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_power_IC_fault_check
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARN_Overload_Check
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_Overload_Check
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_AD24_Overload_Check
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACT_Overload_Check
</UL>

<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.PVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[35c]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(i.PWR_EnterSTOPMode))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_check_powerdown
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HardInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_HardInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EX_E690Board
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration_powerctr
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration_PB9ctr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[204]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_AHB3PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Init
</UL>

<P><STRONG><a name="[a0]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_HardInit
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_PWM_init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_PWMDA_Init_exp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
</UL>

<P><STRONG><a name="[a7]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>

<P><STRONG><a name="[81]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HardInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_HardInit
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
</UL>

<P><STRONG><a name="[317]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[251]"></a>RCC_Configuration</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, arch_stm32.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_Configuration &rArr; RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[252]"></a>RCC_DeInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[318]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, stm32f2xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[25c]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[25e]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[257]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[253]"></a>RCC_HSEConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.RCC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[259]"></a>RCC_PCLK1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[258]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[25b]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[25a]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[25d]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[254]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f2xx_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.RTC_Alarm_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.RTC_WKUP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[326]"></a>ReBoot</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arch_stm32.o(i.ReBoot))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Start
</UL>

<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.SDIO_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[158]"></a>SKER_step_PWMDA_Set_val</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, time.o(i.SKER_step_PWMDA_Set_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SKER_step_PWMDA_Set_val
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CCR_Val_with_PWM_A
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_need_current_add
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_phi_with_stepno
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_phi
</UL>

<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.SPI3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[25f]"></a>SSI_DeSelect_ecode</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, arch_stm32.o(i.SSI_DeSelect_ecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSI_DeSelect_ecode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_shock_board
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Select_with_id
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Read
</UL>

<P><STRONG><a name="[1a8]"></a>SSI_Error</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, coder.o(i.SSI_Error))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERead_Coder
</UL>

<P><STRONG><a name="[1a3]"></a>SSI_Read</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, coder.o(i.SSI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SSI_Read &rArr; SSI_Select_ecode
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_code_data_from_mem
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssidelay15ns
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_is_MT6813PWM_Mode
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Select_ecode
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_DeSelect_ecode
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERead_Coder
</UL>

<P><STRONG><a name="[1ba]"></a>SSI_Select_all_ecode</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, arch_stm32.o(i.SSI_Select_all_ecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSI_Select_all_ecode
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecode_cs_select_all
</UL>

<P><STRONG><a name="[262]"></a>SSI_Select_ecode</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, arch_stm32.o(i.SSI_Select_ecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSI_Select_ecode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_shock_board
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Select_with_id
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Read
</UL>

<P><STRONG><a name="[1b7]"></a>SSI_Select_with_id</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, coder.o(i.SSI_Select_with_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSI_Select_with_id &rArr; SSI_Select_ecode
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Select_ecode
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_DeSelect_ecode
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecode_CS_set
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1ad]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f2xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
</UL>

<P><STRONG><a name="[96]"></a>Scan_error</STRONG> (Thumb, 704 bytes, Stack size 40 bytes, arch_stm32.o(i.Scan_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Scan_error &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_find
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_shock_board
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Get_Board_Type
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TZ_error_st
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alert_Poll
</UL>

<P><STRONG><a name="[cb]"></a>Send_alert_content_loop</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, alert.o(i.Send_alert_content_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Send_alert_content_loop
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_str_with_AlertCodeArg
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_alarm
</UL>

<P><STRONG><a name="[bc]"></a>Send_coder_info</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, coder.o(i.Send_coder_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Send_coder_info &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_Testcode
</UL>

<P><STRONG><a name="[bb]"></a>Send_postion_ecode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, step.o(i.Send_postion_ecode))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_Testcode
</UL>

<P><STRONG><a name="[1b8]"></a>Set_Duty_Fre_reset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, time.o(i.Set_Duty_Fre_reset))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecode_CS_set
</UL>

<P><STRONG><a name="[381]"></a>Set_Ecode_data</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, encoder.o(i.Set_Ecode_data))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM3_isr
</UL>

<P><STRONG><a name="[3a3]"></a>Set_Ecode_st</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, encoder.o(i.Set_Ecode_st))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_pwm_timeout_loop
</UL>

<P><STRONG><a name="[11c]"></a>Set_LX_ex_adjData</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, step.o(i.Set_LX_ex_adjData))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[15c]"></a>Set_Motor_steps_for_ACC_DEC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, step.o(i.Set_Motor_steps_for_ACC_DEC))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[267]"></a>Set_StepMotor_Count</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, arch_stm32.o(i.Set_StepMotor_Count))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_StepMotor_Count
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_EMF_2_SK_board
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[11a]"></a>Set_Step_Motor_TO_Which_Postion</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, step.o(i.Set_Step_Motor_TO_Which_Postion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Set_Step_Motor_TO_Which_Postion
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_STEPMOTO_add
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[119]"></a>Set_Step_Motor_postion_ex</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, step.o(i.Set_Step_Motor_postion_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_Step_Motor_postion_ex
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[13a]"></a>Set_check_mainbinding_timedelay</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, arch_stm32.o(i.Set_check_mainbinding_timedelay))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
</UL>

<P><STRONG><a name="[13b]"></a>Set_checkin_time</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, arch_stm32.o(i.Set_checkin_time))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
</UL>

<P><STRONG><a name="[392]"></a>Set_is_MT6813PWM_Mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, time.o(i.Set_is_MT6813PWM_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33d]"></a>Set_overloadalarm_withMASK</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arch_stm32.o(i.Set_overloadalarm_withMASK))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARN_Overload_Check
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_Overload_Check
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_AD24_Overload_Check
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACT_Overload_Check
</UL>

<P><STRONG><a name="[1a5]"></a>Set_step_alert_st_ecoder</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, step.o(i.Set_step_alert_st_ecoder))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERead_Coder
</UL>

<P><STRONG><a name="[bd]"></a>Setlogid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, encoder.o(i.Setlogid))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_Testcode
</UL>

<P><STRONG><a name="[269]"></a>Shell_CAN_error_data_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, commands.o(i.Shell_CAN_error_data_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Shell_CAN_error_data_get &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_printf_key
</UL>

<P><STRONG><a name="[110]"></a>StepMotor_Action_Set_Position</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, step.o(i.StepMotor_Action_Set_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotor_Action_Set_Position &rArr; StepMotor_Set_Position
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[183]"></a>StepMotor_Add_curr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, step.o(i.StepMotor_Add_curr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = StepMotor_Add_curr &rArr; Exec_Set_Motor_Curr_phi &rArr; DAC_SetVoltage_channel2 &rArr; DAC_SetChannel2Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_phi
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAuto_Zero
</UL>

<P><STRONG><a name="[dd]"></a>StepMotor_All_Reset</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, step.o(i.StepMotor_All_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = StepMotor_All_Reset &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[d9]"></a>StepMotor_DD_config</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, step.o(i.StepMotor_DD_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = StepMotor_DD_config &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Stop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Start
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_EnableIT
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_systime_100us
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[26d]"></a>StepMotor_Detect_Zero2</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, step.o(i.StepMotor_Detect_Zero2))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = StepMotor_Detect_Zero2 &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Work_mid_layer
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Stop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Half
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Dir
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_deInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Setup_ACTION_Para
</UL>

<P><STRONG><a name="[115]"></a>StepMotor_Feet_Setup</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, step.o(i.StepMotor_Feet_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = StepMotor_Feet_Setup &rArr; StepMotor_Feet_exec_no &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Work_mid_layer
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Err_Code_Fun
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Feet_Num
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Feet_exec_no
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[272]"></a>StepMotor_Feet_exec_no</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, step.o(i.StepMotor_Feet_exec_no))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = StepMotor_Feet_exec_no &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_zeroID_with_NO
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_zeroID_cfg_with_NO
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Type_exec
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Feet_Setup
</UL>

<P><STRONG><a name="[21e]"></a>StepMotor_Get_Busyidx</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, step.o(i.StepMotor_Get_Busyidx))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_bind_exec_loop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_StepType_sig
</UL>

<P><STRONG><a name="[e3]"></a>StepMotor_Get_Position</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, step.o(i.StepMotor_Get_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotor_Get_Position
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepspeed_R2Q
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_sysset
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Triangle_Get_Position
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_StepType_sig
</UL>

<P><STRONG><a name="[1be]"></a>StepMotor_Get_Position_2</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, step.o(i.StepMotor_Get_Position_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotor_Get_Position_2
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepspeed_R2Q
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_adjPos
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Poll
</UL>

<P><STRONG><a name="[188]"></a>StepMotor_Get_Running</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, step.o(i.StepMotor_Get_Running))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAuto_Zero
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Poll
</UL>

<P><STRONG><a name="[162]"></a>StepMotor_Get_Zero_ST</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, step.o(i.StepMotor_Get_Zero_ST))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StepMotor_Get_Zero_ST &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_sysset
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_bind_exec_loop
</UL>

<P><STRONG><a name="[21f]"></a>StepMotor_Get_input_error</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, step.o(i.StepMotor_Get_input_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotor_Get_input_error
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepspeed_R2Q
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_StepType_sig
</UL>

<P><STRONG><a name="[277]"></a>StepMotor_Init</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, step.o(i.StepMotor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = StepMotor_Init &rArr; Stepmotor_remape_Simple &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_Simple
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_SKmode2
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_Lift_HP
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_init
</UL>

<P><STRONG><a name="[27b]"></a>StepMotor_Isr</STRONG> (Thumb, 10634 bytes, Stack size 72 bytes, step.o(i.StepMotor_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = StepMotor_Isr &rArr; Step_check_through_zero_adj &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepspeed_Q2R
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_send_log_LX
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_ticktime
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Work_mid_layer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Stop
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Set_Speed
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Pulse
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Half
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Dir
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Active
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_is_zero_Sign
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_is_right_Sign
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_is_left_Sign
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_setCheck
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_clear_restbit
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Work
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero2_support
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sinker
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_other_step
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_lxex_sinker
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_lx_sinker
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_YARN_Step
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_PT_ACTION_Step
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LX_yarn_step
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LX_DENSITY_Step_ex
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LX_DENSITY_Step
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LX_ACTION_Step
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LIFT_or_Other_Step
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LIFT_all_Step
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LIFT_Step
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_JF_DENSITY_Step
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_HP_ACTION_Step
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_HF_ex_LIFT_Step
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_HF_LIFT_Step
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Feet_Step
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_FH_ACTION_Step
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EX_OTHER_Step
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_DOT_ACTION_Step
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_DENSITY_Step
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_CX3_Feet_Step
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ACTION_Step
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yarn_motor_input_bits_set
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yarn_motor_input_bits_send
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_input_is_ok
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_zero_st_check_HF_Lift
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_input_sts_new
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_check_through_zero_adj
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_check_p2n_step_adj
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_check_LX_actstep_adj
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_check_FH_actstep_adj
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Err_Code_Fun
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_IDall_with_no
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_calc_speed_DD
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_calc_speed
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_afterrun_toreport
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Signal_edge_toreport
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr_call
</UL>

<P><STRONG><a name="[2ab]"></a>StepMotor_Isr_call</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, step.o(i.StepMotor_Isr_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = StepMotor_Isr_call &rArr; StepMotor_Isr &rArr; Step_check_through_zero_adj &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM9_isr
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM8_isr
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM2_isr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM1_isr
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM12_isr
</UL>

<P><STRONG><a name="[184]"></a>StepMotor_Modfiy_Position</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, step.o(i.StepMotor_Modfiy_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotor_Modfiy_Position
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepspeed_Q2R
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAuto_Zero
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Poll
</UL>

<P><STRONG><a name="[10a]"></a>StepMotor_Other_SetSpeed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, step.o(i.StepMotor_Other_SetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotor_Other_SetSpeed &rArr; StepMotor_Set_Speed
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Speed
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Reset_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[10d]"></a>StepMotor_Other_Set_Work_Enable</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, step.o(i.StepMotor_Other_Set_Work_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotor_Other_Set_Work_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Setup_ACTION_Para
</UL>

<P><STRONG><a name="[10c]"></a>StepMotor_Other_Set_isfast</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, step.o(i.StepMotor_Other_Set_isfast))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[2ac]"></a>StepMotor_Poll</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, step.o(i.StepMotor_Poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = StepMotor_Poll &rArr; Encoder_Poll &rArr; EAuto_Zero &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Poll
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>StepMotor_Reset</STRONG> (Thumb, 1818 bytes, Stack size 56 bytes, step.o(i.StepMotor_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_send_log_LX
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Work_mid_layer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Stop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Half
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Dir
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_is_zero_Sign
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_is_right_Sign
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_is_left_Sign
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Work
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Reset
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero2_support
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sinker
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_lx_sinker
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_YARN_Step
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_PTorFH_ACTION_Step
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LX_yarn_step
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LX_DENSITY_Step
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LX_ACTION_Step
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LIFT_or_Other_Step
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_HP_ACTION_Step
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_HF_LIFT_Step
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_FH_ACTION_Step
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EX_OTHER_Step
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_DOT_ACTION_Step
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_DENSITY_Step
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_CX3_Feet_Step
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_CX2_Feet_Step
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ACTION_Step
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_input_sts_first
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_sysset
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Type_ResetALL
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Type_Reset
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset_RightMotor
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset_LeftMotor
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_All_Reset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Triangle_step
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Reset_step_moto_one
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Reset_step_moto_all
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAuto_Zero
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARN_Step_Setup
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Feet_exec_no
</UL>

<P><STRONG><a name="[db]"></a>StepMotor_Reset_LeftMotor</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, step.o(i.StepMotor_Reset_LeftMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = StepMotor_Reset_LeftMotor &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[de]"></a>StepMotor_Reset_RightMotor</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, step.o(i.StepMotor_Reset_RightMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = StepMotor_Reset_RightMotor &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[100]"></a>StepMotor_Set_Density_check_zero_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, step.o(i.StepMotor_Set_Density_check_zero_data))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[145]"></a>StepMotor_Set_Ecoder_dir_withzerodir</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, step.o(i.StepMotor_Set_Ecoder_dir_withzerodir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StepMotor_Set_Ecoder_dir_withzerodir
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_setDir
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[ee]"></a>StepMotor_Set_FastMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, step.o(i.StepMotor_Set_FastMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotor_Set_FastMode &rArr; StepMotor_setStep_Fastmode_log
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_setStep_Fastmode_log
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_setStep_Fastmode
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[271]"></a>StepMotor_Set_Feet_Num</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, step.o(i.StepMotor_Set_Feet_Num))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Feet_Setup
</UL>

<P><STRONG><a name="[e7]"></a>StepMotor_Set_Input_error</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, step.o(i.StepMotor_Set_Input_error))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[d8]"></a>StepMotor_Set_MAXSpeed_DD</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, step.o(i.StepMotor_Set_MAXSpeed_DD))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[e6]"></a>StepMotor_Set_Position</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, step.o(i.StepMotor_Set_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotor_Set_Position
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepspeed_Q2R
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_rPos
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_sysset
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Type_Set_Position
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Triangle_Set_Sign
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Action_Set_Position
</UL>

<P><STRONG><a name="[f5]"></a>StepMotor_Set_Reset_Delay_Time</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, step.o(i.StepMotor_Set_Reset_Delay_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = StepMotor_Set_Reset_Delay_Time
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDall
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[e9]"></a>StepMotor_Set_Reset_Speed</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, step.o(i.StepMotor_Set_Reset_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotor_Set_Reset_Speed
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Speed_MainData2HZ
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Other_SetSpeed
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Yarn_step_cmd
</UL>

<P><STRONG><a name="[2b3]"></a>StepMotor_Set_SinkerSpeed</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, step.o(i.StepMotor_Set_SinkerSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Speed
</UL>

<P><STRONG><a name="[e8]"></a>StepMotor_Set_Speed</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, step.o(i.StepMotor_Set_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotor_Set_Speed
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Speed_MainData2HZ
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_SinkerSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Other_SetSpeed
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Yarn_step_cmd
</UL>

<P><STRONG><a name="[f8]"></a>StepMotor_Set_Speed_EX</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, step.o(i.StepMotor_Set_Speed_EX))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_RunSpeed_with_stepno
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_RestSpeed_with_stepno
</UL>

<P><STRONG><a name="[eb]"></a>StepMotor_Set_VeryMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, step.o(i.StepMotor_Set_VeryMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotor_Set_VeryMode &rArr; StepMotor_setVeryEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_setVeryEnable_log
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_setVeryEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[121]"></a>StepMotor_Set_Work_disable_with_ZeroPos</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, step.o(i.StepMotor_Set_Work_disable_with_ZeroPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotor_Set_Work_disable_with_ZeroPos
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[11b]"></a>StepMotor_Set_ZeroPos_WorkST</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, step.o(i.StepMotor_Set_ZeroPos_WorkST))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotor_Set_ZeroPos_WorkST
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[f1]"></a>StepMotor_Set_Zero_go_Steps</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, step.o(i.StepMotor_Set_Zero_go_Steps))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[117]"></a>StepMotor_Set_Zero_go_Steps_ex</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, step.o(i.StepMotor_Set_Zero_go_Steps_ex))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[f4]"></a>StepMotor_Set_movetozero_adv_steps</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, step.o(i.StepMotor_Set_movetozero_adv_steps))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[163]"></a>StepMotor_Set_with_Head_Mode</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, step.o(i.StepMotor_Set_with_Head_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StepMotor_Set_with_Head_Mode &rArr; Stepmotor_remape_Simple &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_Simple
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_SKmode2
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_Lift_LX
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_Lift_HP
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_Feet
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remap_allstep_cx
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_sysset
</UL>

<P><STRONG><a name="[10b]"></a>StepMotor_Set_work_steps</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, step.o(i.StepMotor_Set_work_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotor_Set_work_steps
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[f3]"></a>StepMotor_Set_zero_detect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, step.o(i.StepMotor_Set_zero_detect))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[118]"></a>StepMotor_Set_zero_dir</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, step.o(i.StepMotor_Set_zero_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = StepMotor_Set_zero_dir
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_setDir
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[f2]"></a>StepMotor_Set_zero_type_</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, step.o(i.StepMotor_Set_zero_type_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StepMotor_Set_zero_type_
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[10e]"></a>StepMotor_Setup_ACTION_Para</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, step.o(i.StepMotor_Setup_ACTION_Para))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = StepMotor_Setup_ACTION_Para &rArr; StepMotor_Detect_Zero2 &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Other_Set_Work_Enable
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_IDall_with_IDself
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Detect_Zero2
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[ea]"></a>StepMotor_Setup_Active</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, step.o(i.StepMotor_Setup_Active))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotor_Setup_Active &rArr; StepMotor_setActiveEnable_log
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_setActiveEnable_log
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_setActiveEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[ec]"></a>StepMotor_Setup_Direction</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, step.o(i.StepMotor_Setup_Direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = StepMotor_Setup_Direction
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_setDir
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[ed]"></a>StepMotor_Setup_Direction_log</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, step.o(i.StepMotor_Setup_Direction_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotor_Setup_Direction_log
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[f0]"></a>StepMotor_Setup_Resolution</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, step.o(i.StepMotor_Setup_Resolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = StepMotor_Setup_Resolution &rArr; arch_StepMotor_Set_UMS
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Set_UMS
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_setSteps
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[1f1]"></a>StepMotor_Setup_Yarnstep_Active</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, step.o(i.StepMotor_Setup_Yarnstep_Active))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotor_Setup_Yarnstep_Active
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Yarn_step_cmd
</UL>

<P><STRONG><a name="[28f]"></a>StepMotor_Signal_edge_toreport</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, step.o(i.StepMotor_Signal_edge_toreport))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = StepMotor_Signal_edge_toreport &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[2b2]"></a>StepMotor_Speed_MainData2HZ</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, step.o(i.StepMotor_Speed_MainData2HZ))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Speed
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Reset_Speed
</UL>

<P><STRONG><a name="[11d]"></a>StepMotor_Speed_report</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, step.o(i.StepMotor_Speed_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = StepMotor_Speed_report &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[112]"></a>StepMotor_Triangle_Get_Position</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, step.o(i.StepMotor_Triangle_Get_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotor_Triangle_Get_Position &rArr; StepMotor_Get_Position
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Get_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[113]"></a>StepMotor_Triangle_Get_Sign</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, step.o(i.StepMotor_Triangle_Get_Sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StepMotor_Triangle_Get_Sign &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Work_mid_layer
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_zeroID_with_NO
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_zeroID_cfg_with_NO
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_workID_with_NO
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_workID_cfg_with_NO
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[114]"></a>StepMotor_Triangle_Set_Sign</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, step.o(i.StepMotor_Triangle_Set_Sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotor_Triangle_Set_Sign &rArr; StepMotor_Set_Position
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[106]"></a>StepMotor_Type_Reset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, step.o(i.StepMotor_Type_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = StepMotor_Type_Reset &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[107]"></a>StepMotor_Type_ResetALL</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, step.o(i.StepMotor_Type_ResetALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = StepMotor_Type_ResetALL &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[109]"></a>StepMotor_Type_Set_Position</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, step.o(i.StepMotor_Type_Set_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotor_Type_Set_Position &rArr; StepMotor_Set_Position
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[105]"></a>StepMotor_Type_exec</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, step.o(i.StepMotor_Type_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = StepMotor_Type_exec &rArr; StepMotor_Feet_exec_no &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_FEET_Step_CheckRunTime
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ACTION_Step_CheckRunTime
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ACT_Work_with_POS
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Err_Code_Fun
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Feet_exec_no
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[290]"></a>StepMotor_afterrun_toreport</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, step.o(i.StepMotor_afterrun_toreport))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = StepMotor_afterrun_toreport &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_after_do_report
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_step_goon
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[120]"></a>StepMotor_alert_delay_cnt_set</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, step.o(i.StepMotor_alert_delay_cnt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = StepMotor_alert_delay_cnt_set
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[2a5]"></a>StepMotor_calc_speed</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, step.o(i.StepMotor_calc_speed))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[2a6]"></a>StepMotor_calc_speed_DD</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, step.o(i.StepMotor_calc_speed_DD))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[129]"></a>StepMotor_debug</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, step.o(i.StepMotor_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = StepMotor_debug &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
</UL>

<P><STRONG><a name="[185]"></a>StepMotor_exec</STRONG> (Thumb, 3664 bytes, Stack size 80 bytes, step.o(i.StepMotor_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepspeed_Q2R
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_send_log_LX
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Work_mid_layer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_is_MT6813PWM_Mode
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Stop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Half
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Dir
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_is_zero_Sign
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_setCheck
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Work
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_RunPos
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Ecoder_is_stable
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero2_support
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sinker
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_lxex_sinker
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_lx_sinker
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_YARN_Step
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_PT_sinker
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_PT_ACTION_Step
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LX_yarn_step
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LX_DENSITY_Step
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LX_ACTION_Step
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LIFT_or_Other_Step
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LIFT_Step
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_JF_DENSITY_Step
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_HP_ACTION_Step
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_HF_ex_LIFT_Step
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_HF_LIFT_Step
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Feet_Step
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_FH_ACTION_Step
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EX_OTHER_Step
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_DOT_ACTION_Step
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_DENSITY_Step
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_CX3_Feet_Step
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_CX2_Feet_Step
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ACTION_Step
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_step_pos_isok
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yarn_motor_input_bits_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_input_sts_first
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Err_Code_Fun
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_step_stop_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_step_motor_loop_
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_isr_exec
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Type_exec
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Triangle_step
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_adjPos
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAuto_Zero
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARN_Step_Setup
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Feet_exec_no
</UL>

<P><STRONG><a name="[2c8]"></a>StepMotor_exec_new_dd</STRONG> (Thumb, 3160 bytes, Stack size 88 bytes, step.o(i.StepMotor_exec_new_dd))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = StepMotor_exec_new_dd &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepspeed_Q2R
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_work
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_remainTime_us
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Stop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Half
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_EnableIT
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Dir
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_systime_100us
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_interval_time_100us
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero2_support
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sinker
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LX_DENSITY_Step
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ACTION_Step
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Err_Code_Fun
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_time2speed_DD
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_time2speed
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_IDall_with_no
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_zero_work_area
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_step_stop_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_isr_exec_new_dd
</UL>

<P><STRONG><a name="[2b9]"></a>StepMotor_get_IDall_with_IDself</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, step.o(i.StepMotor_get_IDall_with_IDself))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Setup_ACTION_Para
</UL>

<P><STRONG><a name="[2a9]"></a>StepMotor_get_IDall_with_no</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, step.o(i.StepMotor_get_IDall_with_no))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[e0]"></a>StepMotor_get_no_with_IDall</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, step.o(i.StepMotor_get_no_with_IDall))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_isr_exec
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Reset_Delay_Time
</UL>

<P><STRONG><a name="[1cf]"></a>StepMotor_get_no_with_IDself</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, step.o(i.StepMotor_get_no_with_IDself))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Set_work_check_pos
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_other_Set_Zerowide_inputerror
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_other_Get_Zerowide_inputerror
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_isr_exec_new_dd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Type_exec
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Type_Set_Position
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Type_Reset
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Triangle_Set_Sign
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Triangle_Get_Sign
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Triangle_Get_Position
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_DD_config
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Action_Set_Position
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Step_Motor_postion_ex
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Step_Motor_TO_Which_Postion
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Triangle_step
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_SET_Moto_Zero_Width
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_SET_DCT_sts
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Reset_step_moto_one
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_GET_Moto_Zero_Width
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_StepType_sig
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARN_Step_Setup
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_set_input_checkarg
</UL>

<P><STRONG><a name="[21c]"></a>StepMotor_get_workID_cfg_with_IDself</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, step.o(i.StepMotor_get_workID_cfg_with_IDself))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ZeroWorkStatus_StepType_sig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_StepType_sig
</UL>

<P><STRONG><a name="[2be]"></a>StepMotor_get_workID_cfg_with_NO</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, step.o(i.StepMotor_get_workID_cfg_with_NO))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Triangle_Get_Sign
</UL>

<P><STRONG><a name="[21d]"></a>StepMotor_get_workID_with_IDself</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, step.o(i.StepMotor_get_workID_with_IDself))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ZeroWorkStatus_StepType_sig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_StepType_sig
</UL>

<P><STRONG><a name="[2bf]"></a>StepMotor_get_workID_with_NO</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, step.o(i.StepMotor_get_workID_with_NO))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Triangle_Get_Sign
</UL>

<P><STRONG><a name="[21a]"></a>StepMotor_get_zeroID_cfg_with_IDself</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, step.o(i.StepMotor_get_zeroID_cfg_with_IDself))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ZeroWorkStatus_StepType_sig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_StepType_sig
</UL>

<P><STRONG><a name="[274]"></a>StepMotor_get_zeroID_cfg_with_NO</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, step.o(i.StepMotor_get_zeroID_cfg_with_NO))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Triangle_Get_Sign
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Feet_exec_no
</UL>

<P><STRONG><a name="[21b]"></a>StepMotor_get_zeroID_with_IDself</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, step.o(i.StepMotor_get_zeroID_with_IDself))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ZeroWorkStatus_StepType_sig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_StepType_sig
</UL>

<P><STRONG><a name="[275]"></a>StepMotor_get_zeroID_with_NO</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, step.o(i.StepMotor_get_zeroID_with_NO))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Triangle_Get_Sign
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Feet_exec_no
</UL>

<P><STRONG><a name="[11f]"></a>StepMotor_input_NCorNO_set</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, step.o(i.StepMotor_input_NCorNO_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = StepMotor_input_NCorNO_set
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[e5]"></a>StepMotor_isr_exec</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, step.o(i.StepMotor_isr_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = StepMotor_isr_exec &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDall
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_sysset
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_bind_exec_loop
</UL>

<P><STRONG><a name="[f6]"></a>StepMotor_isr_exec_new_dd</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, step.o(i.StepMotor_isr_exec_new_dd))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = StepMotor_isr_exec_new_dd &rArr; StepMotor_exec_new_dd &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[ba]"></a>StepMotor_justrun</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, step.o(i.StepMotor_justrun))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = StepMotor_justrun &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Stop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Half
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Dir
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_step_stop_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_Testcode
</UL>

<P><STRONG><a name="[102]"></a>StepMotor_other_Get_Zerowide_inputerror</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, step.o(i.StepMotor_other_Get_Zerowide_inputerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotor_other_Get_Zerowide_inputerror
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[101]"></a>StepMotor_other_Set_Zerowide_inputerror</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, step.o(i.StepMotor_other_Set_Zerowide_inputerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotor_other_Set_Zerowide_inputerror
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[189]"></a>StepMotor_reback_curr</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, step.o(i.StepMotor_reback_curr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = StepMotor_reback_curr &rArr; Exec_Set_Motor_Curr_phi &rArr; DAC_SetVoltage_channel2 &rArr; DAC_SetChannel2Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_phi
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAuto_Zero
</UL>

<P><STRONG><a name="[2bb]"></a>StepMotor_setActiveEnable</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, step.o(i.StepMotor_setActiveEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotor_setActiveEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Setup_Active
</UL>

<P><STRONG><a name="[2ba]"></a>StepMotor_setActiveEnable_log</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, step.o(i.StepMotor_setActiveEnable_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotor_setActiveEnable_log
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Setup_Active
</UL>

<P><STRONG><a name="[186]"></a>StepMotor_setMaxSpeed</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, step.o(i.StepMotor_setMaxSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAuto_Zero
</UL>

<P><STRONG><a name="[2b1]"></a>StepMotor_setStep_Fastmode</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, step.o(i.StepMotor_setStep_Fastmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotor_setStep_Fastmode
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_FastMode
</UL>

<P><STRONG><a name="[2b0]"></a>StepMotor_setStep_Fastmode_log</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, step.o(i.StepMotor_setStep_Fastmode_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotor_setStep_Fastmode_log
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_FastMode
</UL>

<P><STRONG><a name="[2b5]"></a>StepMotor_setVeryEnable</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, step.o(i.StepMotor_setVeryEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotor_setVeryEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_VeryMode
</UL>

<P><STRONG><a name="[2b4]"></a>StepMotor_setVeryEnable_log</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, step.o(i.StepMotor_setVeryEnable_log))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_VeryMode
</UL>

<P><STRONG><a name="[11e]"></a>StepMotor_set_LX_ACT_AUTOadj_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, step.o(i.StepMotor_set_LX_ACT_AUTOadj_enable))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[f7]"></a>StepMotor_set_maxspeed_DD_HZ</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, step.o(i.StepMotor_set_maxspeed_DD_HZ))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
</UL>

<P><STRONG><a name="[122]"></a>StepMotor_set_motor_signal_edg_return</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, step.o(i.StepMotor_set_motor_signal_edg_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = StepMotor_set_motor_signal_edg_return
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[1c1]"></a>StepMotor_setpos_2main_postion</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, step.o(i.StepMotor_setpos_2main_postion))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_adjPos
</UL>

<P><STRONG><a name="[2cd]"></a>StepMotor_time2speed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, step.o(i.StepMotor_time2speed))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
</UL>

<P><STRONG><a name="[2cc]"></a>StepMotor_time2speed_DD</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, step.o(i.StepMotor_time2speed_DD))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
</UL>

<P><STRONG><a name="[2ce]"></a>StepMotor_timer</STRONG> (Thumb, 1886 bytes, Stack size 40 bytes, step.o(i.StepMotor_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = StepMotor_timer &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepspeed_Q2R
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Work_mid_layer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Stop
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_is_zero_Sign
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_is_right_Sign
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_is_left_Sign
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Work
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero2_support
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sinker
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_lxex_sinker
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_lx_sinker
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_PT_ACTION_Step
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LX_yarn_step
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LX_DENSITY_Step
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LX_ACTION_Step
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LIFT_or_Other_Step
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_HP_ACTION_Step
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_HF_ex_LIFT_Step
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_HF_LIFT_Step
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Feet_Step
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_FH_ACTION_Step
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EX_OTHER_Step
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_DOT_ACTION_Step
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_CX3_Feet_Step
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_CX2_Feet_Step
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ACTION_Step
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_feet_sts
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_HF_Lift_input_error
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_HF_Lift_Work_with_input
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ACT_Work_with_POS
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Err_Code_Fun
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_2ms_prog
</UL>

<P><STRONG><a name="[273]"></a>Step_Err_Code_Fun</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, step.o(i.Step_Err_Code_Fun))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Type_exec
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Feet_Setup
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_feet_sts
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_HF_Lift_Work_with_input
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ACT_Work_with_POS
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_check_through_zero_adj
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_check_p2n_step_adj
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[ef]"></a>Step_Motor_Set_Check_all</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, step.o(i.Step_Motor_Set_Check_all))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Yarn_step_cmd
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_LostAlert_with_motortype
</UL>

<P><STRONG><a name="[2d2]"></a>Step_PWMDA_Init_exp</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, time.o(i.Step_PWMDA_Init_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Step_PWMDA_Init_exp &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4FastConfig
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3FastConfig
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2FastConfig
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1FastConfig
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[116]"></a>Step_Set_work_check_pos</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, step.o(i.Step_Set_work_check_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Step_Set_work_check_pos
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
</UL>

<P><STRONG><a name="[293]"></a>Step_check_FH_actstep_adj</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, step.o(i.Step_check_FH_actstep_adj))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[294]"></a>Step_check_LX_actstep_adj</STRONG> (Thumb, 748 bytes, Stack size 32 bytes, step.o(i.Step_check_LX_actstep_adj))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Step_check_LX_actstep_adj &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_send_log_LX
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[29c]"></a>Step_check_p2n_step_adj</STRONG> (Thumb, 804 bytes, Stack size 24 bytes, step.o(i.Step_check_p2n_step_adj))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Step_check_p2n_step_adj &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LX_yarn_step_exe
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LX_DENSITY_Step_ex
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Err_Code_Fun
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[29b]"></a>Step_check_through_zero_adj</STRONG> (Thumb, 640 bytes, Stack size 40 bytes, step.o(i.Step_check_through_zero_adj))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Step_check_through_zero_adj &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_send_log_LX
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_lx_sinker_ex
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Err_Code_Fun
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[2ae]"></a>Step_input_sts_first</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, step.o(i.Step_input_sts_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Step_input_sts_first &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Work_mid_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
</UL>

<P><STRONG><a name="[289]"></a>Step_input_sts_new</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, step.o(i.Step_input_sts_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Step_input_sts_new &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Work_mid_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[2e6]"></a>Step_msg_init</STRONG> (Thumb, 538 bytes, Stack size 16 bytes, step.o(i.Step_msg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Step_msg_init &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_alert_delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_Set_ID_Type_with_NO
</UL>

<P><STRONG><a name="[2e9]"></a>Step_set_LX_act_motor_par</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, step.o(i.Step_set_LX_act_motor_par))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_Feet
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_zero_adj_set
</UL>

<P><STRONG><a name="[2e8]"></a>Step_zero_adj_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, step.o(i.Step_zero_adj_set))
<BR><BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_set_LX_act_motor_par
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_Lift_LX
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remap_allstep_cx
</UL>

<P><STRONG><a name="[291]"></a>Step_zero_st_check_HF_Lift</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, step.o(i.Step_zero_st_check_HF_Lift))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[15f]"></a>Stepmotor_Set_ID_Type_with_NO</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, step.o(i.Stepmotor_Set_ID_Type_with_NO))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Stepmotor_Set_ID_Type_with_NO &rArr; Step_msg_init &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_msg_init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_id_self_with_StepType
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_sysset
</UL>

<P><STRONG><a name="[160]"></a>Stepmotor_Set_inputID_with_NO</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, step.o(i.Stepmotor_Set_inputID_with_NO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Stepmotor_Set_inputID_with_NO
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_zeromapid
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_sysset
</UL>

<P><STRONG><a name="[161]"></a>Stepmotor_Set_zerotype_with_NO</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, step.o(i.Stepmotor_Set_zerotype_with_NO))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_sysset
</UL>

<P><STRONG><a name="[2e7]"></a>Stepmotor_alert_delay_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, step.o(i.Stepmotor_alert_delay_init))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_Simple
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_SKmode2
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_Lift_LX
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_Lift_HP
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_Feet
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remap_allstep_cx
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_msg_init
</UL>

<P><STRONG><a name="[164]"></a>Stepmotor_get_Head_Mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, step.o(i.Stepmotor_get_Head_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_sysset
</UL>

<P><STRONG><a name="[2b8]"></a>Stepmotor_remap_allstep_cx</STRONG> (Thumb, 842 bytes, Stack size 40 bytes, step.o(i.Stepmotor_remap_allstep_cx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Stepmotor_remap_allstep_cx &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_alert_delay_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_zero_adj_set
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_with_Head_Mode
</UL>

<P><STRONG><a name="[2b6]"></a>Stepmotor_remape_Feet</STRONG> (Thumb, 858 bytes, Stack size 40 bytes, step.o(i.Stepmotor_remape_Feet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Stepmotor_remape_Feet &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_alert_delay_init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_set_LX_act_motor_par
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_with_Head_Mode
</UL>

<P><STRONG><a name="[27a]"></a>Stepmotor_remape_Lift_HP</STRONG> (Thumb, 1032 bytes, Stack size 40 bytes, step.o(i.Stepmotor_remape_Lift_HP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Stepmotor_remape_Lift_HP &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_data_fill_zero
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_alert_delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_with_Head_Mode
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Init
</UL>

<P><STRONG><a name="[2b7]"></a>Stepmotor_remape_Lift_LX</STRONG> (Thumb, 842 bytes, Stack size 40 bytes, step.o(i.Stepmotor_remape_Lift_LX))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Stepmotor_remape_Lift_LX &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_data_fill_zero
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_alert_delay_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_zero_adj_set
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_with_Head_Mode
</UL>

<P><STRONG><a name="[278]"></a>Stepmotor_remape_SKmode2</STRONG> (Thumb, 948 bytes, Stack size 40 bytes, step.o(i.Stepmotor_remape_SKmode2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Stepmotor_remape_SKmode2 &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_set_stepno
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_data_fill_zero
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_alert_delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_with_Head_Mode
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Init
</UL>

<P><STRONG><a name="[279]"></a>Stepmotor_remape_Simple</STRONG> (Thumb, 910 bytes, Stack size 40 bytes, step.o(i.Stepmotor_remape_Simple))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Stepmotor_remape_Simple &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_EMF_2_SK_board
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_data_fill_zero
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_alert_delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_with_Head_Mode
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Init
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SysTick_Handler &rArr; hook_TIM_sysclk_isr &rArr; hook_time_250us &rArr; time_250us_prog &rArr; arch_Jacquard_ClearBlade &rArr; arch_Clear_check_JQD_YARN_ACT &rArr; get_verydata_with_Arry
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM_sysclk_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SystemInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, system_stm32f2xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.TAMP_STAMP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.TIM1_BRK_TIM9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TIM1_BRK_TIM9_IRQHandler &rArr; hook_TIM9_isr &rArr; StepMotor_Isr_call &rArr; StepMotor_Isr &rArr; Step_check_through_zero_adj &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM9_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TIM1_CC_IRQHandler &rArr; hook_TIM1_isr &rArr; StepMotor_Isr_call &rArr; StepMotor_Isr &rArr; Step_check_through_zero_adj &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM1_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.TIM1_TRG_COM_TIM11_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; hook_TIM10_isr &rArr; arch_JQD_isr_timer_cnt_50us &rArr; arch_Jacquard_ClearBlade &rArr; arch_Clear_check_JQD_YARN_ACT &rArr; get_verydata_with_Arry
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM10_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TIM2_IRQHandler &rArr; hook_TIM2_isr &rArr; StepMotor_Isr_call &rArr; StepMotor_Isr &rArr; Step_check_through_zero_adj &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM2_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM3_IRQHandler &rArr; hook_TIM3_isr &rArr; Ecode_CS_for_MT6813 &rArr; Ecode_CS_set &rArr; SSI_Select_with_id &rArr; SSI_Select_ecode
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM3_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2f5]"></a>TIM3_PWM_input_Config</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, time.o(i.TIM3_PWM_input_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM3_PWM_input_Config &rArr; TIM_PWMIConfig &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectSlaveMode
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectMasterSlaveMode
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICStructInit
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecode_cs_select_all
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TIM4_IRQHandler &rArr; hook_TIM4_isr &rArr; hook_time_2ms &rArr; arch_check_powerdown &rArr; arch_Power_Off &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM4_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.TIM5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.TIM6_DAC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM7_IRQHandler &rArr; hook_TIM7_isr &rArr; hook_time_50us &rArr; arch_yarnemf_pwm_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM7_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.TIM8_BRK_TIM12_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TIM8_BRK_TIM12_IRQHandler &rArr; hook_TIM12_isr &rArr; StepMotor_Isr_call &rArr; StepMotor_Isr &rArr; Step_check_through_zero_adj &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM12_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.TIM8_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TIM8_CC_IRQHandler &rArr; hook_TIM8_isr &rArr; StepMotor_Isr_call &rArr; StepMotor_Isr &rArr; Step_check_through_zero_adj &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM8_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.TIM8_TRG_COM_TIM14_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.TIM8_UP_TIM13_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2e1]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_PWM_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_PWMDA_Init_exp
</UL>

<P><STRONG><a name="[2e2]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM7_isr
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM4_isr
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM10_isr
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config9_ex
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config8
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config7
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config12
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config10
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_input_Config
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_PWM_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_PWMDA_Init_exp
</UL>

<P><STRONG><a name="[380]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM9_isr
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM8_isr
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM3_isr
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM2_isr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM1_isr
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM12_isr
</UL>

<P><STRONG><a name="[2e3]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config9_ex
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config8
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config7
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config12
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config10
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_input_Config
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_PWM_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_PWMDA_Init_exp
</UL>

<P><STRONG><a name="[2ff]"></a>TIM_Config</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, time.o(i.TIM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM_Config &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[300]"></a>TIM_Config10</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, time.o(i.TIM_Config10))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TIM_Config10 &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[301]"></a>TIM_Config12</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, time.o(i.TIM_Config12))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM_Config12 &rArr; TIM_OC2Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[302]"></a>TIM_Config7</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, time.o(i.TIM_Config7))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_Config7 &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[303]"></a>TIM_Config8</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, time.o(i.TIM_Config8))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM_Config8 &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[304]"></a>TIM_Config9_ex</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, time.o(i.TIM_Config9_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM_Config9_ex &rArr; TIM_OC2Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[350]"></a>TIM_GetCapture1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_GetCapture1))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM3_isr
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_remainTime_us
</UL>

<P><STRONG><a name="[351]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_GetCapture2))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM3_isr
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_remainTime_us
</UL>

<P><STRONG><a name="[352]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_GetCapture3))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_remainTime_us
</UL>

<P><STRONG><a name="[353]"></a>TIM_GetCapture4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_GetCapture4))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_remainTime_us
</UL>

<P><STRONG><a name="[226]"></a>TIM_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeStart
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeGet
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_remainTime_us
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Start
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Active
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_systime_100us
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_interval_time_100us
</UL>

<P><STRONG><a name="[37e]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM7_isr
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM4_isr
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM10_isr
</UL>

<P><STRONG><a name="[37f]"></a>TIM_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM9_isr
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM8_isr
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM3_isr
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM2_isr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM1_isr
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM12_isr
</UL>

<P><STRONG><a name="[2f6]"></a>TIM_ICStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_ICStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_input_Config
</UL>

<P><STRONG><a name="[266]"></a>TIM_ITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_start
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_input_Config
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Duty_Fre_reset
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Stop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Start
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_EnableIT
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Active
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_PWM_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_PWMDA_Init_exp
</UL>

<P><STRONG><a name="[305]"></a>TIM_Init</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, time.o(i.TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIM_Init &rArr; TIM3_PWM_input_Config &rArr; TIM_PWMIConfig &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_start
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config9_ex
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config8
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config7
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config12
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config10
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_input_Config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[2df]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_OC1FastConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_PWMDA_Init_exp
</UL>

<P><STRONG><a name="[2de]"></a>TIM_OC1Init</STRONG> (Thumb, 112 bytes, Stack size 4 bytes, stm32f2xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config9_ex
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config8
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config12
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config10
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_PWM_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_PWMDA_Init_exp
</UL>

<P><STRONG><a name="[2e0]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config9_ex
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config8
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config12
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config10
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_PWM_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_PWMDA_Init_exp
</UL>

<P><STRONG><a name="[2d6]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_OC2FastConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_PWMDA_Init_exp
</UL>

<P><STRONG><a name="[2d5]"></a>TIM_OC2Init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, stm32f2xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config9_ex
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config8
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config12
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_PWM_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_PWMDA_Init_exp
</UL>

<P><STRONG><a name="[2d7]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config9_ex
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config8
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config12
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_PWM_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_PWMDA_Init_exp
</UL>

<P><STRONG><a name="[2d9]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_OC3FastConfig))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_PWM_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_PWMDA_Init_exp
</UL>

<P><STRONG><a name="[2d8]"></a>TIM_OC3Init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f2xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config8
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_PWM_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_PWMDA_Init_exp
</UL>

<P><STRONG><a name="[2da]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config8
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_PWM_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_PWMDA_Init_exp
</UL>

<P><STRONG><a name="[2dc]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_OC4FastConfig))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_PWM_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_PWMDA_Init_exp
</UL>

<P><STRONG><a name="[2db]"></a>TIM_OC4Init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32f2xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config8
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_PWM_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_PWMDA_Init_exp
</UL>

<P><STRONG><a name="[2dd]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config8
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_PWM_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_PWMDA_Init_exp
</UL>

<P><STRONG><a name="[2d4]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_OCStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config9_ex
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config8
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config12
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_PWM_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_PWMDA_Init_exp
</UL>

<P><STRONG><a name="[2f7]"></a>TIM_PWMIConfig</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, stm32f2xx_tim.o(i.TIM_PWMIConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_PWMIConfig &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_input_Config
</UL>

<P><STRONG><a name="[2f8]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_SelectInputTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_input_Config
</UL>

<P><STRONG><a name="[2fa]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_SelectMasterSlaveMode))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_input_Config
</UL>

<P><STRONG><a name="[2f9]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_SelectSlaveMode))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_input_Config
</UL>

<P><STRONG><a name="[34d]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Start
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Active
</UL>

<P><STRONG><a name="[231]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIFT_step_PWMDA_Set_val
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Start
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Active
</UL>

<P><STRONG><a name="[1b6]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yarn_step_PWMDA_Set_val
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_step_PWMDA_Set_val
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_set_shock_PWM_1
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Start
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Active
</UL>

<P><STRONG><a name="[1b5]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_SetCompare4))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_set_Step_PWM_A
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKER_step_PWMDA_Set_val
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_step_PWMDA_Set_val
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_set_shock_PWM_2
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Start
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Active
</UL>

<P><STRONG><a name="[30a]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_SetIC1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[308]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_SetIC2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[2d3]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, stm32f2xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config9_ex
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config8
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config7
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config12
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config10
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_input_Config
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_PWM_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_PWMDA_Init_exp
</UL>

<P><STRONG><a name="[30b]"></a>TimeGet</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, time.o(i.TimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_delay_us
</UL>

<P><STRONG><a name="[30c]"></a>TimeStart</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, time.o(i.TimeStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimeStart
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_delay_us
</UL>

<P><STRONG><a name="[30d]"></a>Time_2ms_check_binding</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, main.o(i.Time_2ms_check_binding))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Time_2ms_check_binding &rArr; Exec_check_is_binding_ok &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_check_is_binding_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_2ms_prog
</UL>

<P><STRONG><a name="[30e]"></a>Time_PWM_init</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, time.o(i.Time_PWM_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Time_PWM_init &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4FastConfig
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3FastConfig
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[306]"></a>Time_start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, time.o(i.Time_start))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[30f]"></a>Timer_Check</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, arch_stm32.o(i.Timer_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Timer_Check &rArr; alert_cpu_fatal &rArr; Message_Send_Alert &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_cpu_fatal
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[2a0]"></a>Triangle_input_is_ok</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, step.o(i.Triangle_input_is_ok))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[28a]"></a>Triangle_is_left_Sign</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, arch_stm32.o(i.Triangle_is_left_Sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Triangle_is_left_Sign &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[28b]"></a>Triangle_is_right_Sign</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, arch_stm32.o(i.Triangle_is_right_Sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Triangle_is_right_Sign &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[28c]"></a>Triangle_is_zero_Sign</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, arch_stm32.o(i.Triangle_is_zero_Sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Triangle_is_zero_Sign &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.UART4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.UART5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART1_IRQHandler &rArr; hook_UART1_isr &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_UART1_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.USART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.USART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[388]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_UART1_isr
</UL>

<P><STRONG><a name="[312]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[311]"></a>USART_Configuration</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, uart.o(i.USART_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[313]"></a>USART_DeInit</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, stm32f2xx_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[31a]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Out
</UL>

<P><STRONG><a name="[385]"></a>USART_GetITStatus</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, stm32f2xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_UART1_isr
</UL>

<P><STRONG><a name="[316]"></a>USART_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[315]"></a>USART_Init</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, stm32f2xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[319]"></a>USART_Out</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uart.o(i.USART_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintchar
</UL>

<P><STRONG><a name="[386]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_UART1_isr
</UL>

<P><STRONG><a name="[31b]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Out
</UL>

<P><STRONG><a name="[314]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[12c]"></a>Upgrade_Boot</STRONG> (Thumb, 428 bytes, Stack size 528 bytes, arch_stm32.o(i.Upgrade_Boot))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = Upgrade_Boot &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_Alert
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_immediately
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_LED_Setup
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_start_addr
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_program
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_EraseSector_boot
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_have_crc_flag
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_crc_ok
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Uprade_get_Data_Start_add
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Upgrade_Set_Buf_Type
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Receive
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_LED_On
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
</UL>

<P><STRONG><a name="[12d]"></a>Upgrade_Start</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, arch_stm32.o(i.Upgrade_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Upgrade_Start &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Write
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReBoot
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UsageFault_Handler &rArr; alert_cpu_fatal &rArr; Message_Send_Alert &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_cpu_fatal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.WWDG_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3a5]"></a>WatchDog_Kick</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm32.o(i.WatchDog_Kick))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_250us_prog
</UL>

<P><STRONG><a name="[2c6]"></a>Yarn_motor_input_bits_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, step.o(i.Yarn_motor_input_bits_init))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
</UL>

<P><STRONG><a name="[2a8]"></a>Yarn_motor_input_bits_send</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, step.o(i.Yarn_motor_input_bits_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Yarn_motor_input_bits_send &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[288]"></a>Yarn_motor_input_bits_set</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, step.o(i.Yarn_motor_input_bits_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Yarn_motor_input_bits_set
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[1de]"></a>Yarn_step_PWMDA_Set_val</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, time.o(i.Yarn_step_PWMDA_Set_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Yarn_step_PWMDA_Set_val
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CCR_Val_with_PWM_A
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_need_current_add
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Yarn_step_cmd
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_phi_with_stepno
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_phi
</UL>

<P><STRONG><a name="[327]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3be]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[ad]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SendMessage_immediately
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_printf_key
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_error_printf
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[3bf]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[3c0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3c1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3c2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[cc]"></a>alert_Set_overloaddata</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, alert.o(i.alert_Set_overloaddata))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = alert_Set_overloaddata &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_alarm
</UL>

<P><STRONG><a name="[329]"></a>alert_count</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, alert.o(i.alert_count))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_pop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_find
</UL>

<P><STRONG><a name="[99]"></a>alert_cpu_fatal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, alert.o(i.alert_cpu_fatal))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = alert_cpu_fatal &rArr; Message_Send_Alert &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_Alert
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Check
</UL>

<P><STRONG><a name="[91]"></a>alert_delete</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, alert.o(i.alert_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = alert_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alert_Clear
</UL>

<P><STRONG><a name="[97]"></a>alert_find</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, alert.o(i.alert_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = alert_find
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_count
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_error
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alert_Poll
</UL>

<P><STRONG><a name="[32a]"></a>alert_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, alert.o(i.alert_init))
<BR><BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_buf_back_init
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_init
</UL>

<P><STRONG><a name="[95]"></a>alert_pop</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, alert.o(i.alert_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = alert_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_count
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alert_Poll
</UL>

<P><STRONG><a name="[98]"></a>alert_push</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, alert.o(i.alert_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_count
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_loop
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_xzq
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_dct
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_DirStatus
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_error
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push_again
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alert_Poll
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_TX_Push
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Push
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sti_done
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sinker_done
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lift_step_isstop
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_Setup
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_debug
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Type_exec
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Feet_Setup
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_bind_exec_loop
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_bind_cmd_set
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_check_is_binding_ok
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_new_check_JQD_status
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_alarm_check_start
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_alarm_check_end
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Yarn_step_cmd
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EReport_Error
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_adc_test_DMA2_string2_ch1
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_feet_sts
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_HF_Lift_Work_with_input
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ACT_Work_with_POS
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_check_through_zero_adj
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_check_p2n_step_adj
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_overload_check_poweroff_
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARN_Overload_Check
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_Overload_Check
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_AD24_Overload_Check
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACT_Overload_Check
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOverloadBranch
</UL>

<P><STRONG><a name="[32c]"></a>alert_push_again</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, alert.o(i.alert_push_again))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = alert_push_again &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1df]"></a>alert_set_Step_PWM_A</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, time.o(i.alert_set_Step_PWM_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = alert_set_Step_PWM_A
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CCR_Val_with_PWM_A
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_need_current_add
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Motor_Curr_phi
</UL>

<P><STRONG><a name="[1f8]"></a>alert_set_shock_PWM</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, time.o(i.alert_set_shock_PWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = alert_set_shock_PWM
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_set_shock_PWM_2
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_set_shock_PWM_1
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_alarm_shock
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_init
</UL>

<P><STRONG><a name="[32e]"></a>alert_set_shock_PWM_1</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, time.o(i.alert_set_shock_PWM_1))
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_set_shock_PWM
</UL>

<P><STRONG><a name="[32d]"></a>alert_set_shock_PWM_2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, time.o(i.alert_set_shock_PWM_2))
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_set_shock_PWM
</UL>

<P><STRONG><a name="[265]"></a>alert_str_with_AlertCodeArg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, alert.o(i.alert_str_with_AlertCodeArg))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_alert_content_loop
</UL>

<P><STRONG><a name="[32f]"></a>arch_8803_Reset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_8803_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arch_8803_Reset &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[c1]"></a>arch_8844_Reset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_8844_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arch_8844_Reset &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_alarm
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[331]"></a>arch_8844_Reset_one</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, arch_stm32.o(i.arch_8844_Reset_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_8844_Reset_one &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_Overload_Check
</UL>

<P><STRONG><a name="[332]"></a>arch_ACTEMF_AllClear</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, arch_stm32.o(i.arch_ACTEMF_AllClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arch_ACTEMF_AllClear
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_EMF_2_SK_board
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[1a0]"></a>arch_ACTEMF_Clear</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, arch_stm32.o(i.arch_ACTEMF_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = arch_ACTEMF_Clear &rArr; arch_Clear_check_JQD_YARN_ACT &rArr; get_verydata_with_Arry
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_EMF_2_SK_board
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Clear_check_JQD_YARN_ACT
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMF_autoclear_Timer_2ms
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACT_Overload_Check
</UL>

<P><STRONG><a name="[335]"></a>arch_ACTEMF_PWM_Setup</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, arch_stm32.o(i.arch_ACTEMF_PWM_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arch_ACTEMF_PWM_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_EMF_2_SK_board
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_time_50us
</UL>

<P><STRONG><a name="[1cc]"></a>arch_ACTEMF_Setup</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, arch_stm32.o(i.arch_ACTEMF_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = arch_ACTEMF_Setup &rArr; Message_send_log_ecode &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_EMF_2_SK_board
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_send_log_ecode
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_ad_cur_zero
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Set_check_JQD_YARN_ACT
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_EMF
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACT_Overload_Check
</UL>

<P><STRONG><a name="[24c]"></a>arch_ACT_Overload_Check</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, arch_stm32.o(i.arch_ACT_Overload_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = arch_ACT_Overload_Check &rArr; arch_ACTEMF_Setup &rArr; Message_send_log_ecode &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_ctrl_ex
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACTEMF_Setup
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACTEMF_Clear
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_delay_us
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_set_overload_delay
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_overload_delay
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_overloadalarm_withMASK
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_recheck_finish
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_alarm_status_withMASK
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_alarm_status_withMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_is_reCheck
</UL>

<P><STRONG><a name="[24a]"></a>arch_AD24_Overload_Check</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, arch_stm32.o(i.arch_AD24_Overload_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arch_AD24_Overload_Check &rArr; arch_Power_ctrl_ex
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_ctrl_ex
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_delay_us
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_set_overload_delay
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_overload_delay
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_overloadalarm_withMASK
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_recheck_finish
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_alarm_status_withMASK
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_alarm_status_withMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_is_reCheck
</UL>

<P><STRONG><a name="[36a]"></a>arch_CPLD_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_CPLD_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[34c]"></a>arch_Check_isYarn_step_withstepindex</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_Check_isYarn_step_withstepindex))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_remainTime_us
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Stop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Start
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Pulse
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Half
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Enable_onestepmoto
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_EnableIT
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Disable_onestepmoto
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Dir
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Active
</UL>

<P><STRONG><a name="[333]"></a>arch_Clear_check_JQD_YARN_ACT</STRONG> (Thumb, 198 bytes, Stack size 36 bytes, arch_stm32.o(i.arch_Clear_check_JQD_YARN_ACT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = arch_Clear_check_JQD_YARN_ACT &rArr; get_verydata_with_Arry
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_verydata_with_Arry
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARNEMF_Clear
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_ClearBlade
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACTEMF_Clear
</UL>

<P><STRONG><a name="[364]"></a>arch_EXPID_branch</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_EXPID_branch))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_Ecode_board
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_StepBoard
</UL>

<P><STRONG><a name="[245]"></a>arch_Exti_disable</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_Exti_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_Exti_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Disable
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_need_close711_alert
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_On
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_Off
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverLoad_Setup
</UL>

<P><STRONG><a name="[244]"></a>arch_Exti_enable</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_Exti_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arch_Exti_enable &rArr; EXTI_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Enable
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_need_close711_alert
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_On
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverLoad_Setup
</UL>

<P><STRONG><a name="[33f]"></a>arch_FAN_OFF</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_FAN_OFF))
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ctr_fan_with_temp_
</UL>

<P><STRONG><a name="[340]"></a>arch_FAN_ON</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_FAN_ON))
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ctr_fan_with_temp_
</UL>

<P><STRONG><a name="[341]"></a>arch_GetBoardID</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, arch_stm32.o(i.arch_GetBoardID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arch_GetBoardID
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[342]"></a>arch_GetBoardID_E480</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, arch_stm32.o(i.arch_GetBoardID_E480))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arch_GetBoardID_E480
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[127]"></a>arch_Get_Board_Type</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_Get_Board_Type))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_error
</UL>

<P><STRONG><a name="[126]"></a>arch_Get_Board_Type_boot</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_Get_Board_Type_boot))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
</UL>

<P><STRONG><a name="[b4]"></a>arch_Get_DirStatus</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, arch_stm32.o(i.arch_Get_DirStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arch_Get_DirStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_DirStatus
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_alarm_check_start
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_alarm_check_end
</UL>

<P><STRONG><a name="[ce]"></a>arch_Get_ID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_Get_ID))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_xzq
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_checkonline
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Func_Type
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_Alert
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SendMessage_immediately
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SendMessage
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_send_log_ecode
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_check_online_f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_System
</UL>

<P><STRONG><a name="[1ca]"></a>arch_Get_Test_act_id_</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, arch_stm32.o(i.arch_Get_Test_act_id_))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arch_Get_Test_act_id_
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_EMF
</UL>

<P><STRONG><a name="[343]"></a>arch_JQD_isr_timer_cnt_50us</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, arch_stm32.o(i.arch_JQD_isr_timer_cnt_50us))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = arch_JQD_isr_timer_cnt_50us &rArr; arch_Jacquard_ClearBlade &rArr; arch_Clear_check_JQD_YARN_ACT &rArr; get_verydata_with_Arry
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_Setup
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_ClearBlade
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_check_and_do_next_blade
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM10_isr
</UL>

<P><STRONG><a name="[345]"></a>arch_Jacquard_AllClear</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, arch_stm32.o(i.arch_Jacquard_AllClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = arch_Jacquard_AllClear &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_addr_with_jqdno_blade
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[344]"></a>arch_Jacquard_ClearBlade</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, arch_stm32.o(i.arch_Jacquard_ClearBlade))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = arch_Jacquard_ClearBlade &rArr; arch_Clear_check_JQD_YARN_ACT &rArr; get_verydata_with_Arry
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_addr_with_jqdno_blade
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Clear_check_JQD_YARN_ACT
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_250us_prog
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_Overload_Check
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_JQD_isr_timer_cnt_50us
</UL>

<P><STRONG><a name="[24d]"></a>arch_Jacquard_Overload_Check</STRONG> (Thumb, 410 bytes, Stack size 56 bytes, arch_stm32.o(i.arch_Jacquard_Overload_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = arch_Jacquard_Overload_Check &rArr; arch_Jacquard_ClearBlade &rArr; arch_Clear_check_JQD_YARN_ACT &rArr; get_verydata_with_Arry
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_Setup
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_ClearBlade
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_delay_us
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_CHECK_justcomming
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_8844_Reset_one
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_overloadalarm_withMASK
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_recheck_finish
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_alarm_status_withMASK
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_alarm_status_withMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_is_reCheck
</UL>

<P><STRONG><a name="[3a4]"></a>arch_Jacquard_PWMBlade</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_Jacquard_PWMBlade))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_250us_prog
</UL>

<P><STRONG><a name="[1d1]"></a>arch_Jacquard_Setup</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, arch_stm32.o(i.arch_Jacquard_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = arch_Jacquard_Setup &rArr; arch_Set_check_JQD_YARN_ACT
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_addr_with_jqdno_blade
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_ad_cur_zero
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Set_check_JQD_YARN_ACT
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Jacquard_ex
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_Overload_Check
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_JQD_isr_timer_cnt_50us
</UL>

<P><STRONG><a name="[320]"></a>arch_LED_Off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_LED_Off))
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Boot
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_LED_timer
</UL>

<P><STRONG><a name="[31e]"></a>arch_LED_On</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_LED_On))
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Boot
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_LED_timer
</UL>

<P><STRONG><a name="[b2]"></a>arch_LED_Setup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_LED_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Boot
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Can_ERR_loop
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[347]"></a>arch_LED_timer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_LED_timer))
<BR><BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_LED_On
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_time_2ms
</UL>

<P><STRONG><a name="[12b]"></a>arch_Power_Off</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_Power_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = arch_Power_Off &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Disable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_ctrl_ex
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Exti_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_check_powerdown
</UL>

<P><STRONG><a name="[13d]"></a>arch_Power_On</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_Power_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = arch_Power_On &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_ctrl_ex
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_delay_us
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Exti_enable
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Exti_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[c0]"></a>arch_Power_ctrl_ex</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, arch_stm32.o(i.arch_Power_ctrl_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arch_Power_ctrl_ex
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_alarm
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_EXTI_isr
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_On
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_Off
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_adc_test_DMA2_string2_ch1
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_power_IC_fault_check
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_overload_check_poweroff_
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_adc2_isr
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARN_Overload_Check
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_AD24_Overload_Check
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACT_Overload_Check
</UL>

<P><STRONG><a name="[224]"></a>arch_SendMessage</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, massage.o(i.arch_SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_TX_Push
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Get_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_Alert
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_send_log_LX
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_send_log_ecode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_can_error_msg
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_sendmessage_main_while
</UL>

<P><STRONG><a name="[235]"></a>arch_SendMessage_immediately</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, massage.o(i.arch_SendMessage_immediately))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = arch_SendMessage_immediately &rArr; can_SendMessage &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_SendMessage
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_getCanMailBoxIsEmpty
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Get_ID
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_immediately
</UL>

<P><STRONG><a name="[34a]"></a>arch_SendMessage_with_main</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, massage.o(i.arch_SendMessage_with_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arch_SendMessage_with_main &rArr; can_SendMessage &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_SendMessage
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_getCanMailBoxIsEmpty
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_TX_rpt_next
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_TX_Push
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_TX_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>arch_Set_CANID</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_Set_CANID))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
</UL>

<P><STRONG><a name="[337]"></a>arch_Set_check_JQD_YARN_ACT</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, arch_stm32.o(i.arch_Set_check_JQD_YARN_ACT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arch_Set_check_JQD_YARN_ACT
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARNEMF_Setup
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_Setup
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACTEMF_Setup
</UL>

<P><STRONG><a name="[2a7]"></a>arch_StepMotor_Active</STRONG> (Thumb, 552 bytes, Stack size 16 bytes, arch_stm32.o(i.arch_StepMotor_Active))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arch_StepMotor_Active
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Check_isYarn_step_withstepindex
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[26f]"></a>arch_StepMotor_Dir</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_StepMotor_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_StepMotor_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Check_isYarn_step_withstepindex
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_justrun
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Detect_Zero2
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Init
</UL>

<P><STRONG><a name="[12a]"></a>arch_StepMotor_Disable</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_StepMotor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_StepMotor_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_Off
</UL>

<P><STRONG><a name="[1ee]"></a>arch_StepMotor_Disable_onestepmoto</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_StepMotor_Disable_onestepmoto))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_StepMotor_Disable_onestepmoto
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Check_isYarn_step_withstepindex
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_step_motor_loop_
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_Poweron_with_motortype
</UL>

<P><STRONG><a name="[13e]"></a>arch_StepMotor_Enable</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_StepMotor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arch_StepMotor_Enable &rArr; arch_StepMotor_Init &rArr; arch_StepMotor_Set_UMS
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_peripheral
</UL>

<P><STRONG><a name="[26b]"></a>arch_StepMotor_EnableIT</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_StepMotor_EnableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_StepMotor_EnableIT
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Check_isYarn_step_withstepindex
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_DD_config
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
</UL>

<P><STRONG><a name="[1ed]"></a>arch_StepMotor_Enable_onestepmoto</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_StepMotor_Enable_onestepmoto))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_StepMotor_Enable_onestepmoto
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Check_isYarn_step_withstepindex
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Set_Step_Poweron_with_motortype
</UL>

<P><STRONG><a name="[26e]"></a>arch_StepMotor_Half</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_StepMotor_Half))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_StepMotor_Half
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_E490_board
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Check_isYarn_step_withstepindex
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_justrun
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Detect_Zero2
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Init
</UL>

<P><STRONG><a name="[34e]"></a>arch_StepMotor_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, arch_stm32.o(i.arch_StepMotor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arch_StepMotor_Init &rArr; arch_StepMotor_Set_UMS
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Set_UMS
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Pulse
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Half
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Enable
</UL>

<P><STRONG><a name="[287]"></a>arch_StepMotor_Pulse</STRONG> (Thumb, 486 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_StepMotor_Pulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_StepMotor_Pulse
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Check_isYarn_step_withstepindex
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Init
</UL>

<P><STRONG><a name="[286]"></a>arch_StepMotor_Set_Speed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_StepMotor_Set_Speed))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[2bd]"></a>arch_StepMotor_Set_UMS</STRONG> (Thumb, 386 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_StepMotor_Set_UMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_StepMotor_Set_UMS
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_E490_board
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Setup_Resolution
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Init
</UL>

<P><STRONG><a name="[26c]"></a>arch_StepMotor_Start</STRONG> (Thumb, 540 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_StepMotor_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_StepMotor_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Check_isYarn_step_withstepindex
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_justrun
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_DD_config
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Detect_Zero2
</UL>

<P><STRONG><a name="[26a]"></a>arch_StepMotor_Stop</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, arch_stm32.o(i.arch_StepMotor_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_send_log_LX
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Check_isYarn_step_withstepindex
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_justrun
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_DD_config
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Detect_Zero2
</UL>

<P><STRONG><a name="[219]"></a>arch_StepMotor_Work_mid_layer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_StepMotor_Work_mid_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arch_StepMotor_Work_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Triangle_Get_Sign
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Feet_Setup
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ZeroWorkStatus_StepType_sig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ZeroStatus_log
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ZeroStatus
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_StepType_sig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_StepType
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_feet_sts
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ACT_Work_with_POS
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_input_sts_new
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_input_sts_first
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Detect_Zero2
</UL>

<P><STRONG><a name="[2c9]"></a>arch_StepMotor_Zero</STRONG> (Thumb, 456 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_StepMotor_Zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Work_mid_layer
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_work
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_250us_zero_change
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
</UL>

<P><STRONG><a name="[217]"></a>arch_StepMotor_Zero_mid_layer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_StepMotor_Zero_mid_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_yarnstep_sign_
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Triangle_Get_Sign
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Get_Zero_ST
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Feet_Setup
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ZeroWorkStatus_StepType_sig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ZeroStatus_log
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ZeroStatus
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_StepType_sig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_StepType
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SIG_PH_Status
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_is_zero_Sign
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_is_right_Sign
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_is_left_Sign
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_feet_sts
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_HF_Lift_input_error
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ACT_Work_with_POS
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_Simple
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_SKmode2
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_Lift_LX
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_Lift_HP
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_Feet
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remap_allstep_cx
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_msg_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_input_sts_new
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_input_sts_first
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_afterrun_toreport
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Feet_exec_no
</UL>

<P><STRONG><a name="[2cb]"></a>arch_StepMotor_remainTime_us</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, arch_stm32.o(i.arch_StepMotor_remainTime_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arch_StepMotor_remainTime_us
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture4
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture3
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Check_isYarn_step_withstepindex
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
</UL>

<P><STRONG><a name="[2ca]"></a>arch_StepMotor_work</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_StepMotor_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_StepMotor_work &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
</UL>

<P><STRONG><a name="[221]"></a>arch_System</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, arch_stm32.o(i.arch_System))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arch_System
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Get_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Version
</UL>

<P><STRONG><a name="[324]"></a>arch_Upgrade_Set_Buf_Type</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, upgrade.o(i.arch_Upgrade_Set_Buf_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = arch_Upgrade_Set_Buf_Type &rArr; EE_Write &rArr; EE_WriteVariable &rArr; EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Boot
</UL>

<P><STRONG><a name="[322]"></a>arch_Uprade_get_Data_Start_add</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, upgrade.o(i.arch_Uprade_get_Data_Start_add))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Boot
</UL>

<P><STRONG><a name="[36c]"></a>arch_YARNEMF_AllClear</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_YARNEMF_AllClear))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[1a1]"></a>arch_YARNEMF_Clear</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_YARNEMF_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arch_YARNEMF_Clear &rArr; arch_Clear_check_JQD_YARN_ACT &rArr; get_verydata_with_Arry
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_yarnemf_close_one
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Clear_check_JQD_YARN_ACT
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMF_autoclear_Timer_2ms
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARN_Overload_Check
</UL>

<P><STRONG><a name="[1cd]"></a>arch_YARNEMF_Setup</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, arch_stm32.o(i.arch_YARNEMF_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = arch_YARNEMF_Setup &rArr; arch_YARN_Step_Setup &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_send_log_ecode
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARN_Step_Setup
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_yarnemf_close_one
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_ad_cur_zero
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Set_check_JQD_YARN_ACT
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_EMF
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARN_Overload_Check
</UL>

<P><STRONG><a name="[24b]"></a>arch_YARN_Overload_Check</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, arch_stm32.o(i.arch_YARN_Overload_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = arch_YARN_Overload_Check &rArr; arch_YARNEMF_Setup &rArr; arch_YARN_Step_Setup &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARNEMF_Setup
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARNEMF_Clear
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_ctrl_ex
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_delay_us
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_set_overload_delay
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_overload_delay
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_overloadalarm_withMASK
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_recheck_finish
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_alarm_status_withMASK
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_alarm_status_withMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_is_reCheck
</UL>

<P><STRONG><a name="[355]"></a>arch_YARN_Step_Setup</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, step.o(i.arch_YARN_Step_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = arch_YARN_Step_Setup &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_get_no_with_IDself
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARNEMF_Setup
</UL>

<P><STRONG><a name="[17e]"></a>arch_adc2_isr</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, arch_stm32.o(i.arch_adc2_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = arch_adc2_isr &rArr; arch_adc_test_DMA2_string2_ch1 &rArr; GPIO_SET_711_FAULT_AN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_ctrl_ex
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_adc_test_DMA2_string2_ch1
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_is_come
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOverloadBranch
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[17d]"></a>arch_adc_isr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_adc_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arch_adc_isr &rArr; arch_adc_test &rArr; check_power_alert_is_coming
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_adc_test
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[357]"></a>arch_adc_test</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, adc.o(i.arch_adc_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = arch_adc_test &rArr; check_power_alert_is_coming
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_power_alert_is_coming
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_adc_isr
</UL>

<P><STRONG><a name="[356]"></a>arch_adc_test_DMA2_string2_ch1</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, adc.o(i.arch_adc_test_DMA2_string2_ch1))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = arch_adc_test_DMA2_string2_ch1 &rArr; GPIO_SET_711_FAULT_AN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_ctrl_ex
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_711_FAULT_AN
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_power_alert_is_coming
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_adc2_isr
</UL>

<P><STRONG><a name="[3a8]"></a>arch_check_Overload_longTime</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adc.o(i.arch_check_Overload_longTime))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_2ms_prog
</UL>

<P><STRONG><a name="[bf]"></a>arch_check_power_isok</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_check_power_isok))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_xzq
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_other
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_motor_density
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_dct
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_alarm
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Yarn_step_cmd
</UL>

<P><STRONG><a name="[35b]"></a>arch_check_powerdown</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_check_powerdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = arch_check_powerdown &rArr; arch_Power_Off &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_Off
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_time_2ms
</UL>

<P><STRONG><a name="[323]"></a>arch_crc_ok</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, upgrade.o(i.arch_crc_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arch_crc_ok &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Boot
</UL>

<P><STRONG><a name="[35e]"></a>arch_ctr_fan_with_temp_</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_ctr_fan_with_temp_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_ctr_fan_with_temp_
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_FAN_ON
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_FAN_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fan_ctr
</UL>

<P><STRONG><a name="[33a]"></a>arch_delay_us</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, time.o(i.arch_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arch_delay_us &rArr; TimeStart
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeStart
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_EXTI_isr
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_On
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_power_IC_fault_check
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARN_Overload_Check
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_Overload_Check
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_AD24_Overload_Check
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACT_Overload_Check
</UL>

<P><STRONG><a name="[348]"></a>arch_getCanMailBoxIsEmpty</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, can.o(i.arch_getCanMailBoxIsEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SendMessage_immediately
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SendMessage_with_main
</UL>

<P><STRONG><a name="[223]"></a>arch_get_ad_base_cur_zero</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_get_ad_base_cur_zero))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_base_DC24_zero
</UL>

<P><STRONG><a name="[336]"></a>arch_get_ad_cur_zero</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_get_ad_cur_zero))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARNEMF_Setup
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_Setup
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACTEMF_Setup
</UL>

<P><STRONG><a name="[35f]"></a>arch_get_char_loop</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uart.o(i.arch_get_char_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = arch_get_char_loop &rArr; uart_get_printf_key &rArr; Shell_CAN_error_data_get &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_printf_key
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_uart_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>arch_get_dir1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_get_dir1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_get_dir1
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_DirStatus_new
</UL>

<P><STRONG><a name="[b7]"></a>arch_get_dir2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_get_dir2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_get_dir2
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_DirStatus_new
</UL>

<P><STRONG><a name="[33b]"></a>arch_get_overload_delay</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_get_overload_delay))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_power_IC_fault_check
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARN_Overload_Check
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_AD24_Overload_Check
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACT_Overload_Check
</UL>

<P><STRONG><a name="[1a4]"></a>arch_get_ticktime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_get_ticktime))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_adjPos
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Read_data_with_sys_key
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Stop_Time_Check
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Error_Time_Check
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERead_Coder
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_power_alert_is_coming
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Poll
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_recheck_finish
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_istimeout
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_is_come
</UL>

<P><STRONG><a name="[1f2]"></a>arch_get_yarnstep_sign_</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, step.o(i.arch_get_yarnstep_sign_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arch_get_yarnstep_sign_ &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Yarn_step_cmd
</UL>

<P><STRONG><a name="[321]"></a>arch_have_crc_flag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, upgrade.o(i.arch_have_crc_flag))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Boot
</UL>

<P><STRONG><a name="[362]"></a>arch_init</STRONG> (Thumb, 544 bytes, Stack size 40 bytes, arch_stm32.o(i.arch_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = arch_init &rArr; arch_Power_Off &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_tenBladeSelector_Board
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_shock_board
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_EMF_2_SK_board
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Disable
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_Off
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_8844_Reset
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Version
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_HardInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HardInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_HardInit
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_PWM_init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_PWMDA_Init_exp
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_cfg_yarn_
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_cfg_EXP_Board_
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_cfg_E499Board_
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EX_E690Board
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration_powerctr
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration_PB9ctr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_StepBoard
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_E690_board
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_E490_board
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARNEMF_AllClear
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_LED_On
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_LED_Off
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_AllClear
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_GetBoardID_E480
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_GetBoardID
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_FAN_OFF
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_EXPID_branch
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_CPLD_Reset
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACTEMF_AllClear
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_8803_Reset
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Check
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_StepMotor_Count
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainboardUnlock
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cpld_Name_Ver
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_main_head_board_id_init
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_NRST_Reset
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arch_E499_step_pwm_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34f]"></a>arch_is_E490_board</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_is_E490_board))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Set_UMS
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Half
</UL>

<P><STRONG><a name="[366]"></a>arch_is_E690_board</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_is_E690_board))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fan_ctr
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[268]"></a>arch_is_EMF_2_SK_board</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_is_EMF_2_SK_board))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACTEMF_Setup
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACTEMF_Clear
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_Simple
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACTEMF_PWM_Setup
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACTEMF_AllClear
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_StepMotor_Count
</UL>

<P><STRONG><a name="[36e]"></a>arch_is_Ecode_board</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, arch_stm32.o(i.arch_is_Ecode_board))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arch_is_Ecode_board
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_EXPID_branch
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[367]"></a>arch_is_StepBoard</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, arch_stm32.o(i.arch_is_StepBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arch_is_StepBoard
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_EXPID_branch
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[1f7]"></a>arch_is_shock_board</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_is_shock_board))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_error
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_ctr
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_alarm_shock
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Select_ecode
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_DeSelect_ecode
</UL>

<P><STRONG><a name="[22d]"></a>arch_is_tenBladeSelector_Board</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_is_tenBladeSelector_Board))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JQD_Data_Init
</UL>

<P><STRONG><a name="[1ae]"></a>arch_need_close711_alert</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_need_close711_alert))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Exti_enable
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Exti_disable
</UL>

<P><STRONG><a name="[179]"></a>arch_need_current_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_need_current_add))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_set_Step_SK_A
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_set_Step_PWM_A
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yarn_step_PWMDA_Set_val
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKER_step_PWMDA_Set_val
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIFT_step_PWMDA_Set_val
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_step_PWMDA_Set_val
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetVoltage_channel2
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetVoltage_channel1
</UL>

<P><STRONG><a name="[24f]"></a>arch_overload_check_poweroff_</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_overload_check_poweroff_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arch_overload_check_poweroff_ &rArr; arch_Power_ctrl_ex
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_ctrl_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_is_reCheck
</UL>

<P><STRONG><a name="[24e]"></a>arch_power_IC_fault_check</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, arch_stm32.o(i.arch_power_IC_fault_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arch_power_IC_fault_check &rArr; arch_Power_ctrl_ex
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_ctrl_ex
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_delay_us
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_set_overload_delay
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_overload_delay
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_recheck_finish
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_alarm_status_withMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_is_reCheck
</UL>

<P><STRONG><a name="[1c7]"></a>arch_send_Operate_data</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_send_Operate_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = arch_send_Operate_data &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Check_Resistance_Each
</UL>

<P><STRONG><a name="[36f]"></a>arch_sendmessage_main_while</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, can.o(i.arch_sendmessage_main_while))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = arch_sendmessage_main_while &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_can_tx_2ms_isr
</UL>

<P><STRONG><a name="[370]"></a>arch_set_Step_SK_A</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, arch_stm32.o(i.arch_set_Step_SK_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arch_set_Step_SK_A
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_need_current_add
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[339]"></a>arch_set_overload_delay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_set_overload_delay))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_power_IC_fault_check
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARN_Overload_Check
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_AD24_Overload_Check
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACT_Overload_Check
</UL>

<P><STRONG><a name="[22f]"></a>arch_setup_Jacquard_blade_map</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_setup_Jacquard_blade_map))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jacquard_blade_remap
</UL>

<P><STRONG><a name="[1fa]"></a>arch_shock_activate</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, arch_stm32.o(i.arch_shock_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arch_shock_activate &rArr; arch_shock_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_alarm_shock
</UL>

<P><STRONG><a name="[1cb]"></a>arch_shock_ctr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, arch_stm32.o(i.arch_shock_ctr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arch_shock_ctr &rArr; arch_shock_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_shock_board
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_timer
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_EMF
</UL>

<P><STRONG><a name="[371]"></a>arch_shock_enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_shock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_shock_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_reset
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_ctr
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_activate
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_timer_infun_2
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_timer_infun_1
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_init
</UL>

<P><STRONG><a name="[369]"></a>arch_shock_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, arch_stm32.o(i.arch_shock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arch_shock_init &rArr; alert_set_shock_PWM
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_set_shock_PWM
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[1f9]"></a>arch_shock_reset</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, arch_stm32.o(i.arch_shock_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arch_shock_reset &rArr; arch_shock_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_alarm_shock
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_timer_infun_2
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_timer_infun_1
</UL>

<P><STRONG><a name="[372]"></a>arch_shock_timer</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_shock_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arch_shock_timer &rArr; arch_shock_timer_infun_2 &rArr; arch_shock_reset &rArr; arch_shock_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_ctr
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_timer_infun_2
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_timer_infun_1
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_2ms_prog
</UL>

<P><STRONG><a name="[373]"></a>arch_shock_timer_infun_1</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_shock_timer_infun_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arch_shock_timer_infun_1 &rArr; arch_shock_reset &rArr; arch_shock_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_reset
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_timer
</UL>

<P><STRONG><a name="[374]"></a>arch_shock_timer_infun_2</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, arch_stm32.o(i.arch_shock_timer_infun_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arch_shock_timer_infun_2 &rArr; arch_shock_reset &rArr; arch_shock_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_reset
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_timer
</UL>

<P><STRONG><a name="[360]"></a>arch_uart_getc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uart.o(i.arch_uart_getc))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_char_loop
</UL>

<P><STRONG><a name="[354]"></a>arch_yarnemf_close_one</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, arch_stm32.o(i.arch_yarnemf_close_one))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARNEMF_Setup
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARNEMF_Clear
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_yarnemf_pwm_setup
</UL>

<P><STRONG><a name="[375]"></a>arch_yarnemf_pwm_setup</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, arch_stm32.o(i.arch_yarnemf_pwm_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arch_yarnemf_pwm_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_yarnemf_close_one
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_time_50us
</UL>

<P><STRONG><a name="[349]"></a>can_SendMessage</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, can.o(i.can_SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = can_SendMessage &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SendMessage_immediately
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SendMessage_with_main
</UL>

<P><STRONG><a name="[2c2]"></a>check_ACT_Work_with_POS</STRONG> (Thumb, 512 bytes, Stack size 40 bytes, step.o(i.check_ACT_Work_with_POS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = check_ACT_Work_with_POS &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Work_mid_layer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LX_yarn_step_exe
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_FEET_Step_CheckRunTime
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ACTION_Step_CheckRunTime
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Err_Code_Fun
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Type_exec
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_step_goon
</UL>

<P><STRONG><a name="[2d1]"></a>check_HF_Lift_Work_with_input</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, step.o(i.check_HF_Lift_Work_with_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = check_HF_Lift_Work_with_input &rArr; check_HF_Lift_input_error &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_HF_Lift_input_error
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Err_Code_Fun
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
</UL>

<P><STRONG><a name="[2cf]"></a>check_HF_Lift_input_error</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, step.o(i.check_HF_Lift_input_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = check_HF_Lift_input_error &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_HF_Lift_Work_with_input
</UL>

<P><STRONG><a name="[377]"></a>check_fan_ctr</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, arch_stm32.o(i.check_fan_ctr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_fan_ctr &rArr; arch_ctr_fan_with_temp_
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_E690_board
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ctr_fan_with_temp_
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d0]"></a>check_feet_sts</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, step.o(i.check_feet_sts))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_feet_sts &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero_mid_layer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Work_mid_layer
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Err_Code_Fun
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
</UL>

<P><STRONG><a name="[169]"></a>check_first_getinto_Knit_area</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, main.o(i.check_first_getinto_Knit_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = check_first_getinto_Knit_area
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_xzq
</UL>

<P><STRONG><a name="[243]"></a>check_lift_step_isstop</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, step.o(i.check_lift_step_isstop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = check_lift_step_isstop &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Needle_isr
</UL>

<P><STRONG><a name="[35a]"></a>check_power_alert_is_coming</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, adc.o(i.check_power_alert_is_coming))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_power_alert_is_coming
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_ticktime
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_adc_test_DMA2_string2_ch1
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_adc_test
</UL>

<P><STRONG><a name="[1f4]"></a>check_sinker_done</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, step.o(i.check_sinker_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = check_sinker_done &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_alarm_check_end
</UL>

<P><STRONG><a name="[378]"></a>check_step_goon</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, step.o(i.check_step_goon))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = check_step_goon &rArr; StepMotor_afterrun_toreport &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_rechk_over
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Work
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ACT_Work_with_POS
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_afterrun_toreport
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_step_motor_loop_
</UL>

<P><STRONG><a name="[37a]"></a>check_step_motor_loop_</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, step.o(i.check_step_motor_loop_))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = check_step_motor_loop_ &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Disable_onestepmoto
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_step_goon
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c4]"></a>check_step_pos_isok</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, step.o(i.check_step_pos_isok))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
</UL>

<P><STRONG><a name="[1f5]"></a>check_sti_done</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, step.o(i.check_sti_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = check_sti_done &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_alarm_check_end
</UL>

<P><STRONG><a name="[330]"></a>delay</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, arch_stm32.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_8844_Reset
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_8844_Reset_one
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_8803_Reset
</UL>

<P><STRONG><a name="[334]"></a>delayus</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, arch_stm32.o(i.delayus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_Setup
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_ClearBlade
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACTEMF_Setup
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACTEMF_Clear
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_AllClear
</UL>

<P><STRONG><a name="[1f6]"></a>exec_EMF_YARN_</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, main.o(i.exec_EMF_YARN_))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = exec_EMF_YARN_ &rArr; Exec_EMF &rArr; arch_YARNEMF_Setup &rArr; arch_YARN_Step_Setup &rArr; StepMotor_exec &rArr; StepMotor_Reset &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_EMF
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_alarm_check_end
</UL>

<P><STRONG><a name="[325]"></a>fmc_EraseSector_boot</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, upgrade.o(i.fmc_EraseSector_boot))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fmc_EraseSector_boot &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Sector_address_with_SecNo
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Boot
</UL>

<P><STRONG><a name="[31d]"></a>fmc_init</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, upgrade.o(i.fmc_init))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Boot
</UL>

<P><STRONG><a name="[31f]"></a>fmc_program</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, upgrade.o(i.fmc_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = fmc_program &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Sector_address_with_SecNo
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Boot
</UL>

<P><STRONG><a name="[31c]"></a>fmc_start_addr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, upgrade.o(i.fmc_start_addr))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Boot
</UL>

<P><STRONG><a name="[5e]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[1b4]"></a>get_CCR_Val_with_PWM_A</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, time.o(i.get_CCR_Val_with_PWM_A))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_set_Step_PWM_A
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yarn_step_PWMDA_Set_val
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKER_step_PWMDA_Set_val
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIFT_step_PWMDA_Set_val
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_step_PWMDA_Set_val
</UL>

<P><STRONG><a name="[33e]"></a>get_verydata_with_Arry</STRONG> (Thumb, 232 bytes, Stack size 12 bytes, arch_stm32.o(i.get_verydata_with_Arry))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_verydata_with_Arry
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Clear_check_JQD_YARN_ACT
</UL>

<P><STRONG><a name="[2eb]"></a>get_zeromapid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.get_zeromapid))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_Set_inputID_with_NO
</UL>

<P><STRONG><a name="[9e]"></a>hook_CAN_err_isr</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, can.o(i.hook_CAN_err_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hook_CAN_err_isr &rArr; CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetLastErrorCode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>hook_CAN_isr</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, can.o(i.hook_CAN_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = hook_CAN_isr &rArr; Message_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Push
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[1a9]"></a>hook_EXTI_isr</STRONG> (Thumb, 516 bytes, Stack size 24 bytes, exti.o(i.hook_EXTI_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hook_EXTI_isr &rArr; CheckOverloadBranch &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_ctrl_ex
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_delay_us
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_is_come
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOverloadBranch
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[2f2]"></a>hook_TIM10_isr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, time.o(i.hook_TIM10_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hook_TIM10_isr &rArr; arch_JQD_isr_timer_cnt_50us &rArr; arch_Jacquard_ClearBlade &rArr; arch_Clear_check_JQD_YARN_ACT &rArr; get_verydata_with_Arry
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_JQD_isr_timer_cnt_50us
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[2fd]"></a>hook_TIM12_isr</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, time.o(i.hook_TIM12_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = hook_TIM12_isr &rArr; StepMotor_Isr_call &rArr; StepMotor_Isr &rArr; Step_check_through_zero_adj &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr_call
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
</UL>

<P><STRONG><a name="[2f1]"></a>hook_TIM1_isr</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, time.o(i.hook_TIM1_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = hook_TIM1_isr &rArr; StepMotor_Isr_call &rArr; StepMotor_Isr &rArr; Step_check_through_zero_adj &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr_call
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[2f3]"></a>hook_TIM2_isr</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, time.o(i.hook_TIM2_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = hook_TIM2_isr &rArr; StepMotor_Isr_call &rArr; StepMotor_Isr &rArr; Step_check_through_zero_adj &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr_call
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[2f4]"></a>hook_TIM3_isr</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, time.o(i.hook_TIM3_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hook_TIM3_isr &rArr; Ecode_CS_for_MT6813 &rArr; Ecode_CS_set &rArr; SSI_Select_with_id &rArr; SSI_Select_ecode
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecode_CS_for_MT6813
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Ecode_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[2fb]"></a>hook_TIM4_isr</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, time.o(i.hook_TIM4_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = hook_TIM4_isr &rArr; hook_time_2ms &rArr; arch_check_powerdown &rArr; arch_Power_Off &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_time_2ms
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[2fc]"></a>hook_TIM7_isr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, time.o(i.hook_TIM7_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hook_TIM7_isr &rArr; hook_time_50us &rArr; arch_yarnemf_pwm_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_time_50us
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[2fe]"></a>hook_TIM8_isr</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, time.o(i.hook_TIM8_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = hook_TIM8_isr &rArr; StepMotor_Isr_call &rArr; StepMotor_Isr &rArr; Step_check_through_zero_adj &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr_call
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
</UL>

<P><STRONG><a name="[2f0]"></a>hook_TIM9_isr</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, time.o(i.hook_TIM9_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = hook_TIM9_isr &rArr; StepMotor_Isr_call &rArr; StepMotor_Isr &rArr; Step_check_through_zero_adj &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr_call
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[2ee]"></a>hook_TIM_sysclk_isr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, time.o(i.hook_TIM_sysclk_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hook_TIM_sysclk_isr &rArr; hook_time_250us &rArr; time_250us_prog &rArr; arch_Jacquard_ClearBlade &rArr; arch_Clear_check_JQD_YARN_ACT &rArr; get_verydata_with_Arry
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_CHECK_iscomming
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_time_250us
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[310]"></a>hook_UART1_isr</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uart.o(i.hook_UART1_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hook_UART1_isr &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rxhandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[389]"></a>hook_can_tx_2ms_isr</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, can.o(i.hook_can_tx_2ms_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = hook_can_tx_2ms_isr &rArr; arch_sendmessage_main_while &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_send_Pop
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_sendmessage_main_while
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[384]"></a>hook_time_250us</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, arch_stm32.o(i.hook_time_250us))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hook_time_250us &rArr; time_250us_prog &rArr; arch_Jacquard_ClearBlade &rArr; arch_Clear_check_JQD_YARN_ACT &rArr; get_verydata_with_Arry
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_250us_prog
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_250us_zero_change
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time3_pwm_timeout_250us_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM_sysclk_isr
</UL>

<P><STRONG><a name="[382]"></a>hook_time_2ms</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, arch_stm32.o(i.hook_time_2ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = hook_time_2ms &rArr; arch_check_powerdown &rArr; arch_Power_Off &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alert_Code_Send_Delay_ISR
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_2ms_prog
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_timeout_check_2ms
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_check_powerdown
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_LED_timer
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Overload_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM4_isr
</UL>

<P><STRONG><a name="[383]"></a>hook_time_50us</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, arch_stm32.o(i.hook_time_50us))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hook_time_50us &rArr; arch_yarnemf_pwm_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_yarnemf_pwm_setup
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACTEMF_PWM_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_TIM7_isr
</UL>

<P><STRONG><a name="[2ec]"></a>init_step_data_fill_zero</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, step.o(i.init_step_data_fill_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_step_data_fill_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_Simple
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_SKmode2
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_Lift_LX
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepmotor_remape_Lift_HP
</UL>

<P><STRONG><a name="[2a2]"></a>is_ACTION_Step</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, step.o(i.is_ACTION_Step))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[2c0]"></a>is_ACTION_Step_CheckRunTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, step.o(i.is_ACTION_Step_CheckRunTime))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Type_exec
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ACT_Work_with_POS
</UL>

<P><STRONG><a name="[2ad]"></a>is_CX2_Feet_Step</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, step.o(i.is_CX2_Feet_Step))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
</UL>

<P><STRONG><a name="[281]"></a>is_CX3_Feet_Step</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, step.o(i.is_CX3_Feet_Step))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[298]"></a>is_DENSITY_Step</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, step.o(i.is_DENSITY_Step))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[280]"></a>is_DOT_ACTION_Step</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, step.o(i.is_DOT_ACTION_Step))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[27f]"></a>is_EX_OTHER_Step</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, step.o(i.is_EX_OTHER_Step))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[2c1]"></a>is_FEET_Step_CheckRunTime</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, step.o(i.is_FEET_Step_CheckRunTime))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Type_exec
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ACT_Work_with_POS
</UL>

<P><STRONG><a name="[292]"></a>is_FH_ACTION_Step</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, step.o(i.is_FH_ACTION_Step))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[2a3]"></a>is_Feet_Step</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, step.o(i.is_Feet_Step))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[27e]"></a>is_HF_LIFT_Step</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, step.o(i.is_HF_LIFT_Step))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[29d]"></a>is_HF_ex_LIFT_Step</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, step.o(i.is_HF_ex_LIFT_Step))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[1ef]"></a>is_HP_ACTION_Step</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, step.o(i.is_HP_ACTION_Step))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Triangle_step
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[299]"></a>is_JF_DENSITY_Step</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, step.o(i.is_JF_DENSITY_Step))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[2a4]"></a>is_LIFT_Step</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, step.o(i.is_LIFT_Step))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[297]"></a>is_LIFT_all_Step</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, step.o(i.is_LIFT_all_Step))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[29a]"></a>is_LIFT_or_Other_Step</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, step.o(i.is_LIFT_or_Other_Step))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[27d]"></a>is_LX_ACTION_Step</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, step.o(i.is_LX_ACTION_Step))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[283]"></a>is_LX_DENSITY_Step</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, step.o(i.is_LX_DENSITY_Step))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[29f]"></a>is_LX_DENSITY_Step_ex</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, step.o(i.is_LX_DENSITY_Step_ex))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_check_p2n_step_adj
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[282]"></a>is_LX_yarn_step</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, step.o(i.is_LX_yarn_step))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[2e4]"></a>is_LX_yarn_step_exe</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, step.o(i.is_LX_yarn_step_exe))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ACT_Work_with_POS
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_check_p2n_step_adj
</UL>

<P><STRONG><a name="[28e]"></a>is_PT_ACTION_Step</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, step.o(i.is_PT_ACTION_Step))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[2c5]"></a>is_PT_sinker</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, step.o(i.is_PT_sinker))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
</UL>

<P><STRONG><a name="[2af]"></a>is_PTorFH_ACTION_Step</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, step.o(i.is_PTorFH_ACTION_Step))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
</UL>

<P><STRONG><a name="[2a1]"></a>is_YARN_Step</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, step.o(i.is_YARN_Step))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[284]"></a>is_lx_sinker</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, step.o(i.is_lx_sinker))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[2e5]"></a>is_lx_sinker_ex</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, step.o(i.is_lx_sinker_ex))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_check_through_zero_adj
</UL>

<P><STRONG><a name="[285]"></a>is_lxex_sinker</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, step.o(i.is_lxex_sinker))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[296]"></a>is_other_step</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, step.o(i.is_other_step))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[295]"></a>is_sinker</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, step.o(i.is_sinker))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[28d]"></a>is_zero2_support</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, step.o(i.is_zero2_support))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
</UL>

<P><STRONG><a name="[5b]"></a>main</STRONG> (Thumb, 308 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = main &rArr; Command_loop &rArr; Command_exec_otherset &rArr; Upgrade_Boot &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Check_Resistance_Each
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_loop
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push_again
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alert_Poll
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_pwm_updata_loop
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_pwm_timeout_loop
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_can_tx_2ms_isr
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_step_motor_loop_
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fan_ctr
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_set_Step_SK_A
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_Ecode_board
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_is_EMF_2_SK_board
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_char_loop
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SendMessage_with_main
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_LED_Setup
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Get_ID
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yarn_step_PWMDA_Set_val
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Poll
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_is_MT6813PWM_Mode
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKER_step_PWMDA_Set_val
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_Poll
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_bind_exec_loop
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIFT_step_PWMDA_Set_val
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_PB4_config_def
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Build_Time
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_step_PWMDA_Set_val
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_CHECK_iscomming
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetVoltage_channel2
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetVoltage_channel1
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkin_need_send_data
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_is_MT6813PWM_Mode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Can_ERR_loop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_start_main
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_check_online_f
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Check_Resistance_branch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[396]"></a>myprint</STRONG> (Thumb, 448 bytes, Stack size 64 bytes, dprintf.o(i.myprint))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprints
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprinti
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintchar
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
</UL>

<P><STRONG><a name="[18a]"></a>myprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, dprintf.o(i.myprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprint
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_On
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Power_Off
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Start
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Boot
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_autoZero
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Probe
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAuto_Zero
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CAN_error_data_get
</UL>

<P><STRONG><a name="[3ab]"></a>printf_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dprintf.o(i.printf_enable))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_printf_key
</UL>

<P><STRONG><a name="[368]"></a>reg_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.reg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = reg_init &rArr; StepMotor_Init &rArr; Stepmotor_remape_Simple &rArr; arch_StepMotor_Zero_mid_layer &rArr; arch_StepMotor_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMF_Init
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Overload_Init
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jacquard_Init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JQD_Data_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[395]"></a>send_check_online_f</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.send_check_online_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = send_check_online_f &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Get_ID
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[263]"></a>ssidelay15ns</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, coder.o(i.ssidelay15ns))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ssidelay15ns
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Read
</UL>

<P><STRONG><a name="[3a6]"></a>tanzhen_alarm_delay_Timer_2ms</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, main.o(i.tanzhen_alarm_delay_Timer_2ms))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_2ms_prog
</UL>

<P><STRONG><a name="[394]"></a>tim3_pwm_timeout_loop</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, time.o(i.tim3_pwm_timeout_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tim3_pwm_timeout_loop &rArr; Ecode_CS_for_MT6813 &rArr; Ecode_CS_set &rArr; SSI_Select_with_id &rArr; SSI_Select_ecode
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ecode_CS_for_MT6813
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_is_MT6813PWM_Mode
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Ecode_st
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Duty_Fre_
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[393]"></a>tim3_pwm_updata_loop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, time.o(i.tim3_pwm_updata_loop))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38a]"></a>time3_pwm_timeout_250us_cnt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, time.o(i.time3_pwm_timeout_250us_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_time_250us
</UL>

<P><STRONG><a name="[38b]"></a>time_250us_prog</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, main.o(i.time_250us_prog))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = time_250us_prog &rArr; arch_Jacquard_ClearBlade &rArr; arch_Clear_check_JQD_YARN_ACT &rArr; get_verydata_with_Arry
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_DirStatus_new
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_PWMBlade
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_ClearBlade
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_Kick
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_time_250us
</UL>

<P><STRONG><a name="[38c]"></a>time_250us_zero_change</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, step.o(i.time_250us_zero_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = time_250us_zero_change &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_send_log_LX
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_StepMotor_Zero
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_time_250us
</UL>

<P><STRONG><a name="[38d]"></a>time_2ms_prog</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.time_2ms_prog))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = time_2ms_prog &rArr; StepMotor_timer &rArr; arch_StepMotor_Stop &rArr; Message_send_log_LX &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMF_autoclear_Timer_2ms
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_shock_timer
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_check_Overload_longTime
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_bind_timer_isr
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIn_Timer
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanzhen_alarm_delay_Timer_2ms
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_2ms_check_binding
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JQD_autoclear_Timer_2ms
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JQD_Init_delay_Timer_2ms
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_time_2ms
</UL>

<P><STRONG><a name="[361]"></a>uart_get_printf_key</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uart.o(i.uart_get_printf_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = uart_get_printf_key &rArr; Shell_CAN_error_data_get &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CAN_error_data_get
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_enable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_error_printf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_char_loop
</UL>

<P><STRONG><a name="[387]"></a>uart_rxhandler</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, uart.o(i.uart_rxhandler))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_UART1_isr
</UL>

<P><STRONG><a name="[1c5]"></a>wait_ms</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, arch_stm32.o(i.wait_ms))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Check_Resistance_Each
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_YARN_Overload_Check
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_Overload_Check
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_AD24_Overload_Check
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ACT_Overload_Check
</UL>

<P><STRONG><a name="[1c6]"></a>wait_us</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arch_stm32.o(i.wait_us))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Check_Resistance_Each
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Start
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Boot
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Check_Resistance_branch
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[32b]"></a>alert_buf_back_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, alert.o(i.alert_buf_back_init))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_init
</UL>

<P><STRONG><a name="[128]"></a>Get_Func_Type</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.Get_Func_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Func_Type
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Get_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_otherset
</UL>

<P><STRONG><a name="[c6]"></a>tanzhen_delay_set</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, main.o(i.tanzhen_delay_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tanzhen_delay_set
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_alarm
</UL>

<P><STRONG><a name="[c7]"></a>tanzhen_zt_get</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(i.tanzhen_zt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = tanzhen_zt_get &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TZ_error_st
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_exec_alarm
</UL>

<P><STRONG><a name="[1da]"></a>stepspeed_Q2R</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, step.o(i.stepspeed_Q2R))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_timer
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Set_Position
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_SET_DCT_sts
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec_new_dd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Modfiy_Position
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Isr
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_zero_work_area
</UL>

<P><STRONG><a name="[276]"></a>stepspeed_R2Q</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, step.o(i.stepspeed_R2Q))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Get_input_error
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Get_Position
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Get_Position_2
</UL>

<P><STRONG><a name="[79]"></a>ADC2_ChannelsConfig</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, adc.o(i.ADC2_ChannelsConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC2_ChannelsConfig &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_HardInit
</UL>

<P><STRONG><a name="[89]"></a>ADC_ChannelsConfig</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, adc.o(i.ADC_ChannelsConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_ChannelsConfig &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HardInit
</UL>

<P><STRONG><a name="[346]"></a>Get_addr_with_jqdno_blade</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, arch_stm32.o(i.Get_addr_with_jqdno_blade))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_Setup
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_ClearBlade
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_Jacquard_AllClear
</UL>

<P><STRONG><a name="[199]"></a>EE_FindValidPage</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, eeprom.o(i.EE_FindValidPage))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
</UL>

<P><STRONG><a name="[192]"></a>EE_Format</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, eeprom.o(i.EE_Format))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EE_Format &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>

<P><STRONG><a name="[198]"></a>EE_PageTransfer</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, eeprom.o(i.EE_PageTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_FindValidPage
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable
</UL>

<P><STRONG><a name="[197]"></a>EE_VerifyPageFullWriteVariable</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, eeprom.o(i.EE_VerifyPageFullWriteVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_FindValidPage
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>

<P><STRONG><a name="[399]"></a>myprintFloat</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, dprintf.o(i.myprintFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprinti
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprint
</UL>

<P><STRONG><a name="[39a]"></a>myprintchar</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dprintf.o(i.myprintchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Out
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprint
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprints
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprinti
</UL>

<P><STRONG><a name="[398]"></a>myprinti</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, dprintf.o(i.myprinti))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprints
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintchar
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprint
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintFloat
</UL>

<P><STRONG><a name="[397]"></a>myprints</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, dprintf.o(i.myprints))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintchar
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprint
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprinti
</UL>

<P><STRONG><a name="[182]"></a>EAuto_Zero</STRONG> (Thumb, 574 bytes, Stack size 24 bytes, encoder.o(i.EAuto_Zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = EAuto_Zero &rArr; myprintf &rArr; myprint &rArr; myprintFloat &rArr; myprinti &rArr; myprints &rArr; myprintchar &rArr; USART_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Reset
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMsg_autoZero
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECalc_coder2step
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECalc_Diff
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_setMaxSpeed
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_reback_curr
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_exec
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Modfiy_Position
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Get_Running
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Add_curr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Poll
</UL>

<P><STRONG><a name="[187]"></a>ECalc_Diff</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, encoder.o(i.ECalc_Diff))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECheck_Pos
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAuto_Zero
</UL>

<P><STRONG><a name="[18b]"></a>ECalc_coder2step</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, encoder.o(i.ECalc_coder2step))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECalc_rPos
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAuto_Zero
</UL>

<P><STRONG><a name="[18d]"></a>ECalc_rPos</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, encoder.o(i.ECalc_rPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ECalc_rPos
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECalc_coder2step
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_RunPos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Reset
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Poll
</UL>

<P><STRONG><a name="[18e]"></a>ECheck_Pos</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, encoder.o(i.ECheck_Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ECheck_Pos &rArr; Step_after_do_report &rArr; StepMotor_afterrun_toreport &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_in_Get_St
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_after_do_report
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EReport_Error
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECalc_Diff
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Poll
</UL>

<P><STRONG><a name="[18c]"></a>EMsg_autoZero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, encoder.o(i.EMsg_autoZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = EMsg_autoZero &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_Send_4halfword
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAuto_Zero
</UL>

<P><STRONG><a name="[1a2]"></a>ERead_Coder</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, encoder.o(i.ERead_Coder))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ERead_Coder &rArr; SSI_Read &rArr; SSI_Select_ecode
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Read
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_ticktime
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_in_Get_St
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Stop_Time_Check
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Error_Time_Check
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EReport_Error
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_step_alert_st_ecoder
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Probe
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Poll
</UL>

<P><STRONG><a name="[190]"></a>EReport_Error</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, encoder.o(i.EReport_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EReport_Error &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_push
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_adjPosAll
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERead_Coder
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECheck_Pos
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Poll
</UL>

<P><STRONG><a name="[191]"></a>Step_after_do_report</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, encoder.o(i.Step_after_do_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Step_after_do_report &rArr; StepMotor_afterrun_toreport &rArr; Message_Send_4halfword &rArr; arch_SendMessage &rArr; Message_TX_Push &rArr; alert_push
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_afterrun_toreport
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECheck_Pos
</UL>

<P><STRONG><a name="[a9]"></a>CheckITStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_can.o(i.CheckITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>

<P><STRONG><a name="[309]"></a>TI1_Config</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f2xx_tim.o(i.TI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[307]"></a>TI2_Config</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f2xx_tim.o(i.TI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[2ef]"></a>SetSysClock</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, system_stm32f2xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[328]"></a>_printf_core</STRONG> (Thumb, 660 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
